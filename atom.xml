<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://qz-cqy.github.io</id>
    <title>rui_er | I AK IOI</title>
    <updated>2020-02-07T03:41:40.546Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://qz-cqy.github.io"/>
    <link rel="self" href="https://qz-cqy.github.io/atom.xml"/>
    <subtitle>相信玄学，研究科学 | Think twice, code once. </subtitle>
    <logo>https://qz-cqy.github.io/images/avatar.png</logo>
    <icon>https://qz-cqy.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, rui_er | I AK IOI</rights>
    <entry>
        <title type="html"><![CDATA[T117887 【【QZR-01】G同学与旅行计划】 大样例]]></title>
        <id>https://qz-cqy.github.io/post/big-sample-qzr01-t117887</id>
        <link href="https://qz-cqy.github.io/post/big-sample-qzr01-t117887">
        </link>
        <updated>2020-02-04T03:14:01.000Z</updated>
        <content type="html"><![CDATA[<h1 id="输入样例">输入样例：</h1>
<pre><code>3637 5573 7048 15

1 2 2554
1 1456 2865
1 1457 2907
1 1458 3446
1 1459 1339
1 1460 3828
1 1461 2377
1 1462 4502
1 1463 174
1 1464 1711
1 1465 3419
1 1466 4421
1 1467 1103
1 1468 1231
1 1469 3532
1 1470 1024
1 1471 1260
1 1472 2189
1 1473 1017
1 1474 3147
1 1475 3140
1 1476 4438
1 1477 274
1 1478 3278
1 1479 3273
1 1480 2472
1 1481 1642
1 1482 3581
1 1483 3889
1 1484 1894
1 1485 3842
1 1486 596
1 1487 156
1 1488 2775
1 1489 4653
1 1490 3843
1 1491 3994
1 1492 1432
1 1493 3564
1 1494 4906
1 1495 2764
1 1496 3782
1 1497 4863
1 1498 712
1 1499 3428
1 1500 937
1 1501 3492
1 1502 733
1 1503 4251
1 1504 3472
1 1505 2113
1 1506 4842
1 1507 201
1 1508 880
1 1509 1878
1 1510 4503
1 1511 1654
1 1512 2635
1 1513 212
1 1514 3339
1 1515 1218
1 1516 3654
1 1517 1236
1 1518 2898
1 1519 2302
1 1520 2155
1 1521 4117
1 1522 994
1 1523 1871
1 1524 755
1 1525 2095
1 1526 2107
1 1527 3711
1 1528 4431
1 1529 2340
1 1530 1706
1 1531 4546
1 1532 2792
1 1533 4919
1 1534 2231
1 1535 1813
1 1536 4056
1 1537 1423
1 1538 4072
1 1539 1401
1 1540 1417
1 1541 440
1 1542 524
1 1543 4073
1 1544 4202
1 1545 3618
1 1546 4732
1 1547 798
1 1548 1206
1 1549 3744
1 1550 2322
1 1551 3475
1 1552 1547
1 1553 1334
1 1554 256
1 1555 4187
1 1556 1776
1 1557 4938
1 1558 4445
1 1559 3697
1 1560 784
1 1561 2122
1 1562 1426
1 1563 4410
1 1564 1119
1 1565 3242
1 1566 57
1 1567 2925
1 1568 357
1 1569 1642
1 1570 1427
1 1571 2045
1 1572 400
1 1573 3892
1 1574 3572
1 1575 4026
1 1576 4124
1 1577 713
1 1578 948
1 1579 3756
1 1580 1505
1 1581 4063
1 1582 2128
1 1583 4450
1 1584 4725
1 1585 2495
1 1586 1740
1 1587 3388
1 1588 2300
1 1589 3710
1 1590 421
1 1591 1392
1 1592 446
1 1593 3024
1 1594 1308
1 1595 3252
1 1596 2432
1 1597 868
1 1598 3492
1 1599 4424
1 1600 2631
1 1601 4585
1 1602 4901
1 1603 1238
1 1604 3335
1 1605 3484
1 1606 1699
1 1607 3228
1 1608 3430
1 1609 3367
1 1610 4946
1 1611 2086
1 1612 1825
1 1613 416
1 1614 3178
1 1615 3649
1 1616 1259
1 1617 190
1 1618 563
1 1619 701
1 1620 2309
1 1621 3034
1 1622 3818
1 1623 2993
1 1624 300
1 1625 2188
1 1626 478
1 1627 2641
1 1628 2837
1 1629 1799
1 1630 4304
1 1631 365
1 1632 122
1 1633 2517
1 1634 889
1 1635 4056
1 1636 4868
1 1637 2023
1 1638 813
1 1639 3801
1 1640 26
1 1641 3517
1 1642 3859
1 1643 3903
1 1644 436
1 1645 105
1 1646 396
1 1647 3689
1 1648 786
1 1649 4675
1 1650 3664
1 1651 3498
1 1652 2315
1 1653 2472
1 1654 2733
1 1655 2424
1 1656 3720
1 1657 3349
1 1658 1703
1 1659 3685
1 1660 3257
1 1661 1104
1 1662 2749
1 1663 1766
1 1664 2382
1 1665 1752
1 1666 2985
1 1667 1466
1 1668 1125
1 1669 4157
1 1670 1897
1 1671 913
1 1672 4746
1 1673 618
1 1674 3379
1 1675 1722
1 1676 3424
1 1677 1626
1 1678 1903
1 1679 1848
1 1680 4723
1 1681 1324
1 1682 2708
1 1683 2525
1 1684 4043
1 1685 1087
1 1686 4209
1 1687 478
1 1688 2909
1 1689 562
1 1690 1672
1 1691 934
1 1692 1690
1 1693 2641
1 1694 4406
1 1695 3587
1 1696 3036
1 1697 304
1 1698 811
1 1699 3055
1 1700 2909
1 1701 1703
1 1702 4397
1 1703 2852
1 1704 1065
1 1705 955
1 1706 760
1 1707 1219
1 1708 1639
1 1709 3775
1 1710 2352
1 1711 1546
1 1712 874
1 1713 3967
1 1714 1399
1 1715 2785
1 1716 3795
1 1717 4756
1 1718 1131
1 1719 1514
1 1720 4380
1 1721 3113
1 1722 253
1 1723 2608
1 1724 1147
1 1725 619
1 1726 3497
1 1727 3517
1 1728 4335
1 1729 1203
1 1730 3140
1 1731 4891
1 1732 4424
1 1733 66
1 1734 1420
1 1735 1641
1 1736 1430
1 1737 407
1 1738 4192
1 1739 4216
1 1740 4937
1 1741 3454
1 1742 2044
1 1743 1354
1 1744 1908
1 1745 1350
1 1746 2508
1 1747 4516
1 1748 2665
1 1749 4143
1 1750 4787
1 1751 3761
1 1752 3196
1 1753 1394
1 1754 54
1 1755 3133
1 1756 1842
1 1757 4393
1 1758 2063
1 1759 2425
1 1760 4737
1 1761 614
1 1762 2413
1 1763 3534
1 1764 91
1 1765 3143
1 1766 3308
1 1767 4218
1 1768 1923
1 1769 3194
1 1770 1813
1 1771 4840
1 1772 1310
1 1773 1810
1 1774 4155
1 1775 2040
1 1776 878
1 1777 1498
1 1778 1787
1 1779 1691
1 1780 102
1 1781 3259
1 1782 791
1 1783 2510
1 1784 2270
1 1785 1556
1 1786 231
1 1787 180
1 1788 250
1 1789 2643
1 1790 421
1 1791 519
1 1792 2111
1 1793 3261
1 1794 1378
1 1795 4248
1 1796 379
1 1797 73
1 1798 4909
1 1799 3721
1 1800 3755
1 1801 1348
1 1802 3511
1 1803 4461
1 1804 487
1 1805 3103
1 1806 3636
1 1807 3665
1 1808 3499
1 1809 2564
1 1810 583
1 1811 2760
1 1812 2402
1 1813 3931
1 1814 227
1 1815 4470
1 1816 3368
1 1817 4625
1 1818 177
1 1819 3641
1 1820 1505
1 1821 1349
1 1822 2784
1 1823 375
1 1824 1667
1 1825 2599
1 1826 990
1 1827 904
1 1828 3160
1 1829 487
1 1830 1054
1 1831 2973
1 1832 2760
1 1833 4034
1 1834 774
1 1835 765
1 1836 904
1 1837 426
1 1838 84
1 1839 667
1 1840 3232
1 1841 226
1 1842 3294
1 1843 4855
1 1844 4943
1 1845 3291
1 1846 4974
1 1847 3675
1 1848 700
1 1849 2436
1 1850 3992
1 1851 1986
1 1852 3903
1 1853 3281
1 1854 137
1 1855 3715
1 1856 17
1 1857 2453
1 1858 4874
1 1859 4197
1 1860 4082
1 1861 2341
1 1862 4350
1 1863 4892
1 1864 3441
1 1865 4832
1 1866 1787
1 1867 3709
1 1868 1733
1 1869 2522
1 1870 4349
1 1871 4820
1 1872 2098
1 1873 1696
1 1874 4816
1 1875 571
1 1876 1057
1 1877 4710
1 1878 4324
1 1879 3232
1 1880 1908
1 1881 719
1 1882 4474
1 1883 1532
1 1884 1262
1 1885 1103
1 1886 3679
1 1887 4361
1 1888 3070
1 1889 2204
1 1890 631
1 1891 2842
1 1892 267
1 1893 4480
1 1894 2312
1 1895 828
1 1896 447
1 1897 3673
1 1898 2575
1 1899 4446
1 1900 4314
1 1901 65
1 1902 1407
1 1903 2630
1 1904 596
1 1905 922
1 1906 1641
1 1907 2850
1 1908 2389
1 1909 4567
1 1910 4869
1 1911 2231
1 1912 2944
1 1913 3547
1 1914 896
1 1915 4146
1 1916 4999
1 1917 2547
1 1918 3171
1 1919 309
1 1920 1921
1 1921 2874
1 1922 4400
1 1923 4420
1 1924 4881
1 1925 1378
1 1926 4826
1 1927 336
1 1928 1405
1 1929 3838
1 1930 551
1 1931 419
1 1932 3335
1 1933 563
1 1934 412
1 1935 2343
1 1936 294
1 1937 2396
1 1938 2737
1 1939 2203
1 1940 3061
1 1941 2855
1 1942 690
1 1943 144
1 1944 213
1 1945 4448
1 1946 4350
1 1947 2034
1 1948 3268
1 1949 1390
1 1950 4205
1 1951 4305
1 1952 4695
1 1953 3284
1 1954 3034
1 1955 4330
1 1956 431
1 1957 1258
1 1958 1069
1 1959 2048
1 1960 3798
1 1961 2939
1 1962 3
1 1963 145
1 1964 4056
1 1965 368
1 1966 2226
1 1967 3341
1 1968 2821
1 1969 3912
1 1970 4595
1 1971 2102
1 1972 343
1 1973 4148
1 1974 1549
1 1975 1176
1 1976 3193
1 1977 1586
1 1978 3933
1 1979 1496
1 1980 3762
1 1981 1568
1 1982 3750
1 1983 872
1 1984 2769
1 1985 5000
1 1986 1535
1 1987 2474
1 1988 2552
1 1989 3283
1 1990 2279
1 1991 2267
1 1992 1064
1 1993 1036
1 1994 236
1 1995 898
1 1996 4483
1 1997 4145
1 1998 583
1 1999 3559
1 2000 2406
1 2001 4412
1 2002 988
1 2003 3762
1 2004 4361
1 2005 3604
1 2006 4997
1 2007 1773
1 2008 4926
1 2009 973
1 2010 2456
1 2011 4299
1 2012 3422
1 2013 363
1 2014 3556
1 2015 1412
1 2016 3977
1 2017 271
1 2018 3938
1 2019 4147
1 2020 1467
1 2021 1758
1 2022 1039
1 2023 3761
1 2024 2319
1 2025 1378
1 2026 3725
1 2027 4154
1 2028 2646
1 2029 1611
1 2030 3704
1 2031 3796
1 2032 2959
1 2033 965
1 2034 841
1 2035 4333
1 2036 4241
1 2037 2914
1 2038 4767
1 2039 163
1 2040 24
1 2041 1204
1 2042 2698
1 2043 1864
1 2044 4837
1 2045 341
1 2046 2823
1 2047 88
1 2048 2519
1 2049 1740
1 2050 703
1 2051 2622
1 2052 3814
1 2053 1816
1 2054 133
1 2055 4482
1 2056 1935
1 2057 1445
1 2058 672
1 2059 2190
1 2060 2945
1 2061 1536
1 2062 1619
1 2063 4180
1 2064 755
1 2065 4434
1 2066 173
1 2067 1828
1 2068 1848
1 2069 2309
1 2070 462
1 2071 4959
1 2072 1650
1 2073 3705
1 2074 3781
1 2075 2178
1 2076 2005
1 2077 2565
1 2078 982
1 2079 4384
1 2080 507
1 2081 2497
1 2082 3585
1 2083 1394
1 2084 4739
1 2085 2104
1 2086 1219
1 2087 558
1 2088 4398
1 2089 3770
1 2090 4178
1 2091 3185
1 2092 846
1 2093 807
1 2094 1100
1 2095 3840
1 2096 3240
1 2097 3964
1 2098 1880
1 2099 4815
1 2100 3408
1 2101 4924
1 2102 1893
1 2103 795
1 2104 4023
1 2105 3083
1 2106 3037
1 2107 3583
1 2108 2366
1 2109 3067
1 2110 1684
1 2111 2625
1 2112 3989
1 2113 3713
1 2114 1755
1 2115 2665
1 2116 4686
1 2117 808
1 2118 682
1 2119 3593
1 2120 773
1 2121 3868
1 2122 2602
1 2123 4521
1 2124 2354
1 2125 3943
1 2126 3077
1 2127 3204
1 2128 4279
1 2129 3738
1 2130 865
1 2131 4645
1 2132 1023
1 2133 4687
1 2134 3066
1 2135 186
1 2136 1456
1 2137 103
1 2138 2463
1 2139 554
1 2140 3248
1 2141 184
1 2142 3989
1 2143 622
1 2144 964
1 2145 1055
1 2146 2027
1 2147 2337
1 2148 1693
1 2149 2767
1 2150 2047
1 2151 3309
1 2152 3721
1 2153 4959
1 2154 1528
1 2155 2278
1 2156 2938
1 2157 2700
1 2158 85
1 2159 3000
1 2160 3608
1 2161 2062
1 2162 2616
1 2163 1148
1 2164 43
1 2165 4320
1 2166 2135
1 2167 1039
1 2168 1398
1 2169 2246
1 2170 3423
1 2171 2866
1 2172 4348
1 2173 4106
1 2174 253
1 2175 1917
1 2176 2910
1 2177 1964
1 2178 46
1 2179 3473
1 2180 3124
1 2181 2285
1 2182 4697
1 2183 1807
1 2184 3021
1 2185 2267
1 2186 2480
1 2187 4585
1 2188 3473
1 2189 3243
1 2190 4638
1 2191 2729
1 2192 3375
1 2193 137
1 2194 4288
1 2195 4245
1 2196 2484
1 2197 2909
1 2198 2497
1 2199 827
1 2200 2028
1 2201 4816
1 2202 4206
1 2203 789
1 2204 1287
1 2205 4642
1 2206 262
1 2207 3138
1 2208 1126
1 2209 2447
1 2210 3767
1 2211 4318
1 2212 724
1 2213 2477
1 2214 4348
1 2215 2089
1 2216 4627
1 2217 2668
1 2218 2777
1 2219 1522
1 2220 2920
1 2221 597
1 2222 2305
1 2223 3002
1 2224 1547
1 2225 3433
1 2226 4484
1 2227 131
1 2228 1186
1 2229 466
1 2230 2602
1 2231 4216
1 2232 4510
1 2233 2761
1 2234 758
1 2235 3474
1 2236 2763
1 2237 1390
1 2238 2137
1 2239 4959
1 2240 255
1 2241 4542
1 2242 3547
1 2243 1449
1 2244 650
1 2245 4728
1 2246 3712
1 2247 4886
1 2248 2953
1 2249 2354
1 2250 2163
1 2251 1899
1 2252 4148
1 2253 4833
1 2254 4599
1 2255 1799
1 2256 134
1 2257 2747
1 2258 438
1 2259 3485
1 2260 1252
1 2261 4742
1 2262 2334
1 2263 830
1 2264 1465
1 2265 3727
1 2266 88
1 2267 4948
1 2268 703
1 2269 3381
1 2270 196
1 2271 2181
1 2272 2542
1 2273 810
1 2274 2614
1 2275 1519
1 2276 2050
1 2277 2679
1 2278 2009
1 2279 2555
1 2280 3304
1 2281 872
1 2282 1125
1 2283 169
1 2284 1636
1 2285 4583
1 2286 2173
1 2287 4775
1 2288 4267
1 2289 809
1 2290 1145
1 2291 2679
1 2292 4810
1 2293 2657
1 2294 594
1 2295 3354
1 2296 4386
1 2297 1265
1 2298 3689
1 2299 1698
1 2300 1787
1 2301 3383
1 2302 4373
1 2303 474
1 2304 1848
1 2305 1721
1 2306 2954
1 2307 2960
1 2308 3009
1 2309 953
1 2310 3846
1 2311 661
1 2312 4890
1 2313 2076
1 2314 3369
1 2315 3832
1 2316 2144
1 2317 1411
1 2318 4911
1 2319 3200
1 2320 2153
1 2321 1247
1 2322 4342
1 2323 1124
1 2324 1498
1 2325 2264
1 2326 1955
1 2327 2741
1 2328 3165
1 2329 66
1 2330 1206
1 2331 1855
1 2332 3980
1 2333 4689
1 2334 638
1 2335 3125
1 2336 1101
1 2337 2901
1 2338 3556
1 2339 2496
1 2340 1948
1 2341 389
1 2342 2535
1 2343 1545
1 2344 3504
1 2345 3592
1 2346 2684
1 2347 3780
1 2348 1754
1 2349 533
1 2350 2430
1 2351 2381
1 2352 1046
1 2353 3458
1 2354 2191
1 2355 1270
1 2356 3523
1 2357 3750
1 2358 566
1 2359 2767
1 2360 2482
1 2361 1119
1 2362 264
1 2363 4443
1 2364 4664
1 2365 4630
1 2366 931
1 2367 4993
1 2368 3233
1 2369 3612
1 2370 4635
1 2371 578
1 2372 4858
1 2373 3523
1 2374 3107
1 2375 827
1 2376 2917
1 2377 1330
1 2378 3833
1 2379 2092
1 2380 1421
1 2381 1276
1 2382 1381
1 2383 4817
1 2384 1646
1 2385 1654
1 2386 2230
1 2387 1983
1 2388 3210
1 2389 4696
1 2390 598
1 2391 3275
1 2392 4256
1 2393 1959
1 2394 608
1 2395 3731
1 2396 4739
1 2397 4088
1 2398 3659
1 2399 1215
1 2400 526
1 2401 2396
1 2402 1225
1 2403 756
1 2404 3125
1 2405 4659
1 2406 2042
1 2407 1556
1 2408 4483
1 2409 3937
1 2410 628
1 2411 1201
1 2412 3197
1 2413 3526
1 2414 2103
1 2415 307
1 2416 4463
1 2417 4308
1 2418 3848
1 2419 614
1 2420 4749
1 2421 43
1 2422 3066
1 2423 2035
1 2424 1139
1 2425 1623
1 2426 3246
1 2427 1589
1 2428 2289
1 2429 2214
1 2430 4657
1 2431 3921
1 2432 1994
1 2433 4293
1 2434 1852
1 2435 1844
1 2436 1541
1 2437 4093
1 2438 3819
1 2439 1371
1 2440 2774
1 2441 731
1 2442 2196
1 2443 3372
1 2444 1428
1 2445 129
1 2446 3838
1 2447 452
1 2448 3854
1 2449 2142
1 2450 733
1 2451 3666
1 2452 2267
1 2453 3878
1 2454 4149
1 2455 305
1 2456 4168
1 2457 4600
1 2458 4003
1 2459 3108
1 2460 2290
1 2461 1408
1 2462 2842
1 2463 3124
1 2464 2341
1 2465 3360
1 2466 3541
1 2467 4946
1 2468 4942
1 2469 437
1 2470 2210
1 2471 4535
1 2472 1662
1 2473 85
1 2474 662
1 2475 3878
1 2476 75
1 2477 1674
1 2478 322
1 2479 1358
1 2480 1256
1 2481 118
1 2482 4682
1 2483 3502
1 2484 3360
1 2485 4386
1 2486 2959
1 2487 3020
1 2488 4193
1 2489 1225
1 2490 1653
1 2491 1757
1 2492 2449
1 2493 4275
1 2494 2467
1 2495 583
1 2496 1532
1 2497 1974
1 2498 822
1 2499 1243
1 2500 2840
1 2501 2879
1 2502 1604
1 2503 1456
1 2504 2642
1 2505 1500
1 2506 1640
1 2507 1785
1 2508 1310
1 2509 4549
1 2510 170
1 2511 1680
1 2512 3273
1 2513 4455
1 2514 756
1 2515 1556
1 2516 1236
1 2517 509
1 2518 3775
1 2519 855
1 2520 4915
1 2521 1048
1 2522 1327
1 2523 4391
1 2524 2905
1 2525 2045
1 2526 4445
1 2527 4075
1 2528 3500
1 2529 2017
1 2530 3866
1 2531 1094
1 2532 657
1 2533 2
1 2534 442
1 2535 1514
1 2536 1427
1 2537 2369
1 2538 1427
1 2539 4391
1 2540 3563
1 2541 3358
1 2542 4597
1 2543 4953
1 2544 167
1 2545 1072
1 2546 686
1 2547 1627
1 2548 4080
1 2549 3929
1 2550 2059
1 2551 310
1 2552 2793
1 2553 936
1 2554 201
1 2555 4694
1 2556 853
1 2557 799
1 2558 4527
1 2559 2404
1 2560 4231
1 2561 2942
1 2562 1660
1 2563 831
1 2564 3384
1 2565 558
1 2566 2311
1 2567 3082
1 2568 1953
1 2569 4619
1 2570 2018
1 2571 2058
1 2572 4962
1 2573 666
1 2574 2002
1 2575 4734
1 2576 828
1 2577 463
1 2578 1614
1 2579 4012
1 2580 982
1 2581 263
1 2582 756
1 2583 393
1 2584 166
1 2585 2222
1 2586 1930
1 2587 1412
1 2588 4174
1 2589 1595
1 2590 1285
1 2591 627
1 2592 4085
1 2593 1180
1 2594 325
1 2595 2783
1 2596 1013
1 2597 2807
1 2598 4071
1 2599 957
1 2600 2686
1 2601 335
1 2602 290
1 2603 3956
1 2604 3487
1 2605 4157
1 2606 4289
1 2607 1008
1 2608 3114
1 2609 3724
1 2610 2336
1 2611 133
1 2612 4754
1 2613 2073
1 2614 3690
1 2615 3968
1 2616 4095
1 2617 3236
1 2618 2755
1 2619 717
1 2620 2855
1 2621 1106
1 2622 2979
1 2623 2045
1 2624 15
1 2625 2550
1 2626 2972
1 2627 3843
1 2628 792
1 2629 215
1 2630 2314
1 2631 3760
1 2632 2806
1 2633 4997
1 2634 2534
1 2635 4350
1 2636 1452
1 2637 781
1 2638 2454
1 2639 2831
1 2640 4161
1 2641 2755
1 2642 4074
1 2643 4789
1 2644 2035
1 2645 1960
1 2646 1201
1 2647 4550
1 2648 957
1 2649 1446
1 2650 3023
1 2651 1367
1 2652 4706
1 2653 2589
1 2654 335
1 2655 681
1 2656 3799
1 2657 2550
1 2658 3524
1 2659 4060
1 2660 485
1 2661 4165
1 2662 926
1 2663 3749
1 2664 1755
1 2665 780
1 2666 4457
1 2667 1425
1 2668 1953
1 2669 4277
1 2670 4687
1 2671 3536
1 2672 3623
1 2673 1940
1 2674 561
1 2675 290
1 2676 4906
1 2677 3525
1 2678 1045
1 2679 4158
1 2680 1235
1 2681 199
1 2682 400
1 2683 2790
1 2684 4569
1 2685 3275
1 2686 3224
1 2687 2125
1 2688 4712
1 2689 3460
1 2690 2378
1 2691 1740
1 2692 4831
1 2693 2649
1 2694 3412
1 2695 771
1 2696 2275
1 2697 4229
1 2698 2673
1 2699 521
1 2700 3384
1 2701 27
1 2702 1870
1 2703 2425
1 2704 501
1 2705 3454
1 2706 3750
1 2707 2560
1 2708 3739
1 2709 2417
1 2710 3965
1 2711 1603
1 2712 1904
1 2713 1364
1 2714 1130
1 2715 1182
1 2716 1889
1 2717 1524
1 2718 3763
1 2719 4604
1 2720 4140
1 2721 1464
1 2722 138
1 2723 3109
1 2724 1397
1 2725 1170
1 2726 1456
1 2727 3286
2 3 1225
3 4 3666
4 5 4221
5 6 336
6 7 3936
6 2986 4167
6 3535 2073
6 3564 4238
7 8 4444
8 9 3064
8 2926 615
9 10 2430
10 11 742
11 12 3884
12 13 4793
12 3507 3316
13 14 2708
13 3469 234
14 15 3261
15 16 913
16 17 1994
17 18 564
18 19 2845
19 20 2918
20 21 4650
21 22 2455
21 2892 1166
21 3114 3344
22 23 1769
23 24 2266
24 25 3289
25 26 1944
26 27 544
27 28 812
27 3583 1701
28 29 1625
29 30 579
30 31 4511
31 32 4728
31 3183 530
32 33 2012
33 34 4246
34 35 38
35 36 1359
36 37 2962
37 38 4353
38 39 4829
39 40 3134
40 41 4193
41 42 2956
41 3568 3898
42 43 1630
43 44 3038
44 45 4681
45 46 2706
46 47 4920
47 48 3418
47 3237 1954
48 49 248
49 50 754
50 51 1812
51 52 2403
52 53 1483
53 54 4642
54 55 2256
55 56 1290
56 57 2256
56 3428 1326
57 58 4891
57 3319 3595
58 59 3085
58 2946 3202
59 60 133
60 61 2394
61 62 1838
62 63 4423
63 64 2840
64 65 1296
64 2891 1332
65 66 1387
66 67 3465
66 3409 1459
67 68 4286
68 69 1117
69 70 247
69 3590 359
70 71 765
70 3473 4765
71 72 389
72 73 3445
73 74 2662
74 75 1131
74 3260 115
75 76 4000
76 77 264
77 78 1520
78 79 1183
79 80 187
80 81 438
80 3148 2277
81 82 1695
82 83 2957
83 84 4835
84 85 1927
85 86 1511
86 87 2820
87 88 2761
87 3557 2125
88 89 250
89 90 2416
90 91 4705
91 92 3932
92 93 1061
93 94 318
94 95 1702
95 96 182
95 2969 4334
96 97 3701
97 98 2657
97 3543 4784
98 99 3125
99 100 3148
100 101 2113
100 2739 4620
101 102 461
102 103 4307
103 104 4307
104 105 1946
105 106 1308
105 2787 2183
106 107 2870
106 2950 1282
107 108 775
107 2774 1454
107 2853 2919
107 3020 4373
108 109 3434
108 2998 1013
109 110 4000
110 111 4159
111 112 1943
112 113 1013
112 3063 1009
113 114 2921
114 115 2010
115 116 2550
116 117 3816
117 118 4455
117 3101 2129
118 119 3578
119 120 4787
119 2949 3413
120 121 4173
121 122 4832
122 123 1263
123 124 1872
124 125 1402
125 126 1186
125 3008 3399
126 127 4454
127 128 4340
128 129 4657
128 2879 4358
128 3330 1815
129 130 4905
130 131 3223
131 132 249
132 133 8
133 134 4157
134 135 3551
135 136 2322
135 3123 3967
136 137 3478
136 2973 1453
137 138 4463
138 139 4682
139 140 1634
139 2942 3169
140 141 2359
141 142 4892
142 143 4303
142 3435 2082
143 144 137
144 145 3254
145 146 4758
146 147 4398
147 148 1254
148 149 2956
148 3124 737
149 150 80
150 151 4328
150 3389 2732
151 152 1800
152 153 2863
153 154 1118
154 155 3797
155 156 187
156 157 4842
157 158 1700
158 159 3535
159 160 4253
160 161 4121
160 3366 3548
161 162 261
162 163 4677
163 164 4760
164 165 931
164 3225 2005
165 166 2209
166 167 968
167 168 622
167 3519 1870
168 169 3785
169 170 1625
170 171 3912
171 172 4591
171 3488 1139
172 173 2094
173 174 2523
174 175 2172
175 176 1750
175 2964 3274
175 3200 1554
176 177 2080
177 178 3519
178 179 1230
179 180 1363
180 181 160
181 182 2012
182 183 2013
183 184 3978
183 2960 4240
183 3152 60
184 185 4119
184 3630 3886
185 186 653
186 187 3020
186 3385 2126
187 188 1254
187 2828 617
187 2975 3617
188 189 3827
189 190 1580
189 3038 1446
190 191 4897
191 192 2347
192 193 2107
193 194 2462
194 195 292
195 196 2453
196 197 787
197 198 1802
198 199 1648
198 3417 2677
199 200 4209
200 201 2180
201 202 5000
202 203 626
203 204 1519
204 205 3558
205 206 3563
205 3556 3529
206 207 448
206 3531 4298
207 208 4539
207 3179 1875
208 209 4876
208 2893 2623
209 210 2928
210 211 4229
211 212 1238
211 3258 2800
212 213 2011
213 214 3188
214 215 3138
214 3308 3093
214 3419 1069
215 216 3208
216 217 3210
217 218 3948
218 219 2481
219 220 823
220 221 4490
221 222 1422
222 223 1353
223 224 3683
224 225 2861
225 226 1338
226 227 1547
226 3271 174
227 228 2721
228 229 2913
229 230 4423
230 231 3600
231 232 1234
231 3621 4612
232 233 264
233 234 1831
234 235 2731
235 236 3427
235 3302 3771
236 237 3401
237 238 3947
237 3515 3304
238 239 1133
239 240 3401
239 2995 1855
239 3634 3359
240 241 2459
241 242 2957
242 243 3234
243 244 3006
244 245 1800
244 2917 1968
244 3229 3823
245 246 1905
246 247 3139
247 248 4617
248 249 1276
249 250 3821
250 251 3948
251 252 1668
251 2832 3567
252 253 4140
253 254 2456
254 255 4978
254 2804 4529
255 256 4307
256 257 609
257 258 4606
258 259 302
259 260 1378
260 261 4870
261 262 1316
262 263 1710
262 2906 3130
263 264 1787
264 265 74
265 266 2232
266 267 173
267 268 527
268 269 2035
269 270 3549
270 271 184
271 272 2218
272 273 3299
272 2992 4251
273 274 3600
274 275 4794
275 276 1374
276 277 1568
277 278 3573
278 279 1949
279 280 2277
280 281 1389
281 282 2883
282 283 3206
282 2822 18
282 3174 1633
283 284 2881
283 3597 917
284 285 4121
284 2867 2415
285 286 3474
286 287 4709
287 288 1452
288 289 465
289 290 4133
289 3465 1919
289 3514 1041
290 291 658
291 292 4035
292 293 2354
293 294 4742
294 295 1807
295 296 3382
296 297 1917
297 298 2174
298 299 2392
299 300 4456
300 301 2827
301 302 2052
302 303 1952
303 304 1545
304 305 1874
305 306 4407
306 307 3006
307 308 2801
308 309 1801
309 310 2316
310 311 3371
311 312 2925
312 313 1747
312 3438 1239
313 314 25
314 315 3445
314 3601 228
315 316 2217
316 317 3902
317 318 3769
318 319 3913
319 320 1039
320 321 3180
321 322 354
321 3280 3042
322 323 2290
323 324 2596
324 325 884
325 326 963
326 327 753
327 328 4051
328 329 2252
329 330 1211
330 331 2866
331 332 3099
332 333 4413
333 334 1003
333 2767 3055
334 335 3262
335 336 380
336 337 1958
337 338 4275
338 339 2051
338 2790 2676
339 340 3577
339 2768 4105
340 341 2812
340 3483 2164
341 342 4767
341 3466 3662
342 343 3072
342 3057 836
343 344 4530
344 345 2889
344 3320 2533
345 346 2917
346 347 1620
346 2794 2410
347 348 1689
348 349 562
349 350 4814
350 351 2599
350 2742 3327
350 3043 357
351 352 3341
352 353 4598
353 354 746
353 2859 2141
354 355 3318
355 356 2241
355 3094 3827
356 357 144
357 358 4277
358 359 517
359 360 3489
360 361 2726
360 3154 1472
361 362 3618
362 363 1554
363 364 1955
364 365 139
365 366 234
366 367 4626
367 368 3670
367 3281 3351
368 369 3395
368 2866 2738
369 370 2559
370 371 2210
371 372 3373
372 373 708
373 374 2053
374 375 511
375 376 3401
376 377 3875
377 378 4721
378 379 2877
378 3238 2317
379 380 1710
380 381 3839
380 2900 3864
381 382 3623
382 383 4552
383 384 4646
384 385 3244
385 386 1280
386 387 3416
387 388 4706
388 389 2727
389 390 2409
389 2956 2383
389 3516 2293
390 391 4673
391 392 2927
392 393 4485
393 394 4169
393 2897 3970
394 395 1345
395 396 1914
395 3537 1578
396 397 3852
397 398 3766
397 3437 2908
398 399 221
399 400 3691
399 3198 79
400 401 1945
401 402 3118
401 3235 2528
402 403 1750
402 3110 2612
403 404 1505
404 405 2590
404 3278 2574
405 406 1062
406 407 2310
406 3464 326
407 408 4510
408 409 2707
409 410 4135
409 3227 3179
410 411 4461
411 412 615
412 413 1141
412 3335 1234
413 414 351
414 415 1558
415 416 344
416 417 829
417 418 1961
418 419 758
419 420 3127
420 421 3078
420 2782 2037
421 422 4852
422 423 2917
423 424 427
424 425 2594
424 2799 1532
425 426 4974
426 427 1469
427 428 665
428 429 2953
428 2847 168
428 3440 4971
429 430 4612
429 2959 1784
429 3003 4153
430 431 266
431 432 938
432 433 3685
433 434 4615
434 435 2176
435 436 4329
435 3397 1951
436 437 4030
437 438 3146
438 439 1512
439 440 4392
439 2748 3267
439 2916 2496
440 441 3534
441 442 189
441 2784 1321
442 443 1412
443 444 862
443 2728 4752
443 2770 1097
444 445 243
445 446 888
445 2827 37
446 447 4208
447 448 4555
447 3447 4766
448 449 1502
449 450 2027
450 451 4997
451 452 2384
451 3457 1275
451 3518 3766
452 453 3645
453 454 4882
453 3036 1086
454 455 717
455 456 4174
456 457 1556
457 458 501
458 459 2700
458 2830 2427
459 460 4774
460 461 4026
461 462 1638
462 463 3254
463 464 2087
464 465 570
465 466 995
466 467 2934
466 2825 2735
467 468 709
467 2750 2602
468 469 2795
469 470 3279
469 2771 1653
470 471 3354
471 472 1579
472 473 2252
473 474 2644
474 475 2069
474 2789 2689
474 2908 2233
475 476 3722
475 3130 4349
476 477 4584
477 478 3298
478 479 4373
479 480 3236
480 481 4814
481 482 1561
482 483 3841
482 3524 4382
483 484 1725
484 485 266
485 486 3577
486 487 2753
487 488 3667
488 489 2810
489 490 548
489 3346 2916
490 491 944
491 492 2285
492 493 1772
493 494 716
494 495 657
495 496 788
495 3637 703
496 497 2462
497 498 23
497 2944 259
498 499 1252
499 500 2792
500 501 4768
501 502 70
502 503 1667
502 3317 2591
503 504 1933
503 2776 2318
504 505 3319
505 506 714
505 2800 1529
506 507 1582
507 508 2764
508 509 1429
508 2901 4528
509 510 784
510 511 2098
510 3326 94
511 512 1449
512 513 145
513 514 3120
514 515 1165
515 516 2472
516 517 2028
517 518 1051
518 519 2010
518 3093 1925
519 520 3079
519 3166 3523
520 521 1189
521 522 1568
522 523 4619
523 524 3937
524 525 3497
524 2941 4819
525 526 1372
526 527 2666
526 3023 4434
527 528 3793
528 529 1785
529 530 523
529 3383 1270
530 531 3286
531 532 3951
532 533 2673
532 3029 3793
533 534 2088
534 535 1987
534 3297 1258
535 536 1338
536 537 3817
537 538 3600
538 539 2732
539 540 4225
539 3522 235
540 541 3868
541 542 913
542 543 1947
542 3216 3441
543 544 1524
544 545 1038
545 546 932
546 547 849
547 548 3459
548 549 4485
549 550 1829
550 551 4806
550 3412 356
551 552 81
551 2765 955
552 553 970
553 554 2483
553 3195 276
554 555 534
555 556 4865
555 3039 866
556 557 3266
557 558 1899
558 559 2736
559 560 2702
560 561 851
560 2838 4484
561 562 1973
562 563 1541
563 564 891
563 3408 3317
564 565 1686
564 3600 1222
565 566 1572
566 567 3159
567 568 896
567 2951 2765
568 569 2787
569 570 1200
569 3542 3491
570 571 1337
570 3533 3524
571 572 566
571 2877 750
572 573 2132
573 574 153
574 575 1251
575 576 2735
576 577 3473
577 578 1667
578 579 2155
578 2961 2322
579 580 3755
580 581 2668
580 3363 715
581 582 2374
582 583 2619
583 584 2497
584 585 428
584 3558 3401
585 586 2100
586 587 2924
587 588 4772
588 589 3556
589 590 403
590 591 3447
591 592 4459
592 593 4731
592 3139 4217
593 594 365
594 595 2230
595 596 2297
596 597 3255
596 3177 596
597 598 298
597 2843 415
598 599 3099
598 3240 3670
599 600 4034
600 601 997
601 602 1444
602 603 4143
603 604 4212
604 605 4448
605 606 1184
606 607 1678
606 3065 1969
606 3618 3043
607 608 802
608 609 2736
609 610 775
610 611 3787
611 612 856
611 3034 1424
612 613 1118
613 614 3869
614 615 309
615 616 547
616 617 486
617 618 2566
617 2983 18
618 619 895
618 2772 2999
619 620 1762
619 3202 1496
620 621 2587
621 622 1675
622 623 228
622 2889 2972
623 624 1112
624 625 2197
625 626 1462
626 627 4527
627 628 3152
628 629 2725
628 3567 4712
629 630 4929
629 3490 2957
630 631 2889
631 632 3422
631 3512 1700
632 633 523
633 634 2676
634 635 4427
635 636 3857
636 637 686
637 638 2590
638 639 1699
638 3523 2366
639 640 3285
640 641 1976
641 642 4028
642 643 2164
642 3167 3511
643 644 3296
643 2979 901
644 645 772
645 646 812
646 647 1200
646 3005 3290
647 648 340
648 649 3686
649 650 4030
650 651 469
650 3504 3877
651 652 819
652 653 638
653 654 1825
654 655 3103
655 656 1053
656 657 638
657 658 2042
658 659 2320
659 660 2394
660 661 4935
661 662 213
661 2881 382
662 663 4253
662 3028 338
663 664 1209
663 3276 531
664 665 957
665 666 4124
665 3201 1041
666 667 488
666 3614 4600
667 668 3623
668 669 1049
669 670 370
670 671 3355
671 672 2014
671 2974 4197
672 673 162
672 3125 3275
673 674 4124
673 2846 2921
674 675 2289
675 676 3833
676 677 1460
677 678 1141
678 679 4081
679 680 3856
679 3215 2767
679 3553 4267
680 681 4774
681 682 2456
682 683 61
682 2890 2657
683 684 1949
684 685 1475
684 3180 403
685 686 2721
686 687 1559
687 688 3487
687 3204 231
687 3270 4933
688 689 3409
688 3551 3676
689 690 538
690 691 4251
691 692 2057
692 693 919
693 694 2596
694 695 4729
695 696 4100
696 697 549
696 3205 600
697 698 3301
698 699 2132
699 700 849
700 701 2679
701 702 301
702 703 1956
703 704 1161
704 705 705
705 706 4059
706 707 1112
706 3061 1982
707 708 1799
708 709 1292
709 710 2470
709 2781 4275
710 711 4326
711 712 2627
712 713 1712
713 714 2744
714 715 3626
714 3071 4314
715 716 3377
716 717 2622
717 718 1937
718 719 4288
719 720 889
720 721 1614
721 722 3811
722 723 1225
723 724 387
724 725 933
725 726 4057
726 727 589
727 728 2546
728 729 2023
728 3546 1896
729 730 1341
730 731 2259
731 732 299
732 733 1668
732 3329 2233
733 734 272
734 735 3645
735 736 1553
736 737 982
737 738 3434
737 3187 302
738 739 2749
738 2907 1075
738 3184 1096
739 740 1114
740 741 2634
741 742 4853
741 3479 900
741 3526 2945
742 743 328
743 744 170
744 745 1941
745 746 1236
746 747 2653
746 3266 2488
747 748 2136
748 749 1607
749 750 1934
750 751 1723
751 752 1934
751 3082 3424
752 753 3791
753 754 2465
754 755 210
755 756 4443
756 757 1478
756 3002 3365
757 758 4022
758 759 1015
759 760 2875
760 761 3136
760 3299 1727
761 762 3454
762 763 1215
763 764 4474
764 765 505
765 766 3756
765 3268 4713
766 767 2068
767 768 43
768 769 3925
769 770 324
770 771 178
770 3309 1882
771 772 4104
771 2898 810
772 773 1736
773 774 3881
774 775 1963
775 776 2224
776 777 218
777 778 1659
778 779 733
779 780 1140
780 781 204
780 2922 4527
781 782 594
782 783 3345
783 784 3388
784 785 2627
785 786 4578
786 787 4688
787 788 3816
788 789 730
789 790 1098
790 791 938
791 792 1136
792 793 517
793 794 4542
794 795 4691
795 796 3047
795 3133 3610
796 797 1759
796 2766 2607
797 798 1035
797 3401 3180
798 799 3850
799 800 2807
800 801 409
801 802 1979
802 803 4666
802 2938 3121
802 3453 437
803 804 1578
804 805 2054
805 806 4573
806 807 987
807 808 3334
807 3470 691
808 809 3407
808 3351 1034
809 810 3169
810 811 3539
810 2932 4563
811 812 3155
811 3233 4844
812 813 2416
813 814 1309
813 3482 3205
814 815 4789
815 816 4175
816 817 885
816 3059 3119
817 818 2807
818 819 4525
818 3451 4961
819 820 2086
820 821 2323
821 822 58
822 823 3973
822 2812 1616
823 824 4723
824 825 925
825 826 2053
826 827 4172
827 828 4550
828 829 2619
829 830 105
830 831 2973
831 832 2796
831 3503 4860
832 833 866
833 834 692
834 835 2958
834 2811 2472
835 836 4055
836 837 2862
837 838 4340
838 839 1886
839 840 4386
840 841 2753
840 3484 3214
841 842 4647
842 843 4304
842 3104 2631
842 3403 2929
843 844 474
844 845 4634
845 846 503
846 847 4858
847 848 4293
848 849 1497
849 850 2865
850 851 714
851 852 4291
852 853 1262
852 3505 4856
853 854 4739
854 855 4501
855 856 4862
856 857 317
857 858 2603
858 859 990
859 860 3876
860 861 1059
861 862 1828
862 863 97
863 864 4488
864 865 806
864 2755 4325
865 866 786
865 3158 1890
865 3209 3781
866 867 3629
867 868 996
867 3506 3716
868 869 3980
868 2928 845
869 870 1681
870 871 3389
871 872 1196
871 2912 2519
872 873 2795
873 874 212
874 875 593
874 3429 3310
875 876 3334
875 3085 1372
876 877 598
877 878 4795
878 879 1138
879 880 1889
880 881 2480
881 882 1625
882 883 3064
882 2921 3279
882 3407 3576
883 884 2877
884 885 180
885 886 243
886 887 4677
887 888 269
888 889 2720
888 3455 3996
889 890 783
889 2948 4334
890 891 4499
890 2966 2711
891 892 3097
892 893 677
893 894 620
893 2778 4311
894 895 1656
895 896 365
896 897 2126
897 898 2169
898 899 806
899 900 4973
900 901 1932
901 902 1449
901 3427 1769
902 903 3686
902 3536 4429
903 904 78
904 905 3305
905 906 3997
906 907 2738
907 908 640
908 909 2713
909 910 3838
910 911 3963
911 912 2566
912 913 1816
913 914 2590
914 915 2062
915 916 3479
915 3053 1571
916 917 2683
917 918 3293
917 2996 4146
918 919 1587
919 920 4699
920 921 3656
921 922 4845
921 2988 2030
922 923 1347
923 924 1352
924 925 4550
925 926 3803
925 2978 2780
926 927 44
927 928 4336
927 2809 4594
928 929 4072
929 930 2486
929 3146 4696
930 931 4157
931 932 3465
932 933 2728
933 934 1826
934 935 1441
935 936 1832
936 937 2120
937 938 3455
937 2910 654
938 939 3924
939 940 3560
940 941 3809
941 942 2893
942 943 2616
943 944 1796
944 945 1477
945 946 2315
945 2899 4773
945 3236 4480
946 947 3736
947 948 1983
948 949 4694
949 950 665
950 951 395
951 952 3804
951 3067 2944
952 953 354
953 954 2602
954 955 207
954 3360 2575
955 956 821
955 3446 1894
956 957 4669
957 958 1942
958 959 813
959 960 174
959 3405 1695
960 961 1622
961 962 1150
962 963 1450
962 3631 2117
963 964 3243
964 965 155
965 966 74
966 967 1729
967 968 1775
968 969 3248
969 970 2250
970 971 2401
971 972 1648
972 973 4083
973 974 905
974 975 206
975 976 4666
976 977 1789
977 978 120
978 979 2063
979 980 444
980 981 3072
981 982 155
982 983 4918
983 984 109
983 3115 3917
984 985 4487
985 986 4979
985 3091 4710
986 987 1083
986 2805 2561
987 988 4902
988 989 3254
989 990 4884
990 991 4057
990 3347 1657
990 3348 247
991 992 2411
992 993 4836
992 2796 4346
993 994 2728
994 995 3152
995 996 4610
996 997 1384
996 3323 609
997 998 2385
997 3561 4488
998 999 3808
999 1000 1681
1000 1001 2153
1001 1002 4295
1002 1003 511
1003 1004 1208
1004 1005 3391
1005 1006 2885
1006 1007 4522
1007 1008 3523
1008 1009 531
1008 3620 934
1009 1010 4726
1010 1011 4370
1011 1012 2613
1012 1013 1422
1013 1014 594
1013 2745 922
1014 1015 4262
1015 1016 4652
1016 1017 1825
1017 1018 4183
1018 1019 4577
1018 2895 2581
1018 3189 2776
1019 1020 4564
1020 1021 4849
1021 1022 1522
1022 1023 1976
1023 1024 1198
1023 2856 313
1024 1025 4118
1025 1026 1700
1025 3358 958
1026 1027 2466
1027 1028 4034
1028 1029 4570
1028 3610 3682
1029 1030 3866
1029 3042 804
1029 3328 754
1030 1031 1443
1031 1032 4807
1032 1033 1461
1033 1034 3277
1033 2999 4662
1033 3171 4616
1034 1035 4195
1034 3136 3373
1035 1036 3881
1035 2905 2877
1036 1037 3967
1036 3301 920
1037 1038 52
1037 3609 143
1038 1039 2895
1039 1040 3568
1040 1041 2325
1041 1042 498
1042 1043 476
1043 1044 4555
1043 3015 639
1044 1045 2055
1045 1046 2789
1046 1047 2685
1047 1048 3826
1048 1049 683
1048 2795 3108
1049 1050 1202
1050 1051 1790
1051 1052 564
1052 1053 4501
1053 1054 1126
1054 1055 1286
1055 1056 2659
1055 3364 1775
1056 1057 4225
1057 1058 4519
1058 1059 4859
1058 3439 4917
1059 1060 3887
1059 2732 3787
1060 1061 2533
1061 1062 4847
1062 1063 4200
1063 1064 3158
1063 2902 4684
1064 1065 708
1065 1066 505
1065 3269 1962
1065 3404 706
1065 3579 3619
1066 1067 4997
1067 1068 1052
1068 1069 3067
1069 1070 1302
1070 1071 1937
1071 1072 1123
1072 1073 4995
1073 1074 2747
1074 1075 3338
1074 3024 4469
1075 1076 3434
1076 1077 1593
1076 2862 4964
1076 3430 1857
1077 1078 3015
1078 1079 4042
1078 2919 4074
1079 1080 2886
1080 1081 3101
1081 1082 1474
1082 1083 1438
1082 3508 533
1083 1084 776
1084 1085 2285
1085 1086 4602
1086 1087 2411
1087 1088 383
1088 1089 4175
1089 1090 355
1089 3616 2184
1090 1091 2067
1090 3213 1176
1091 1092 1953
1092 1093 3759
1092 3064 360
1093 1094 4896
1094 1095 200
1095 1096 526
1095 2819 1525
1096 1097 2747
1096 3463 3666
1097 1098 934
1098 1099 787
1099 1100 1197
1099 3410 2278
1100 1101 2562
1101 1102 4421
1101 3333 2204
1102 1103 127
1103 1104 3840
1104 1105 4125
1105 1106 4682
1106 1107 674
1107 1108 2779
1108 1109 4588
1109 1110 4133
1110 1111 1043
1111 1112 713
1112 1113 3907
1113 1114 13
1114 1115 2063
1115 1116 2818
1115 3157 3665
1116 1117 2423
1116 3598 4670
1117 1118 289
1117 3594 4767
1118 1119 4874
1119 1120 2849
1120 1121 3293
1120 3019 2892
1121 1122 2310
1121 2779 2317
1122 1123 522
1122 2764 478
1123 1124 2164
1124 1125 2853
1124 3141 3037
1125 1126 1027
1125 2915 3249
1126 1127 693
1127 1128 495
1128 1129 3367
1129 1130 2478
1130 1131 973
1131 1132 4957
1132 1133 847
1133 1134 2826
1133 3395 1062
1134 1135 4286
1135 1136 1942
1136 1137 1766
1137 1138 4537
1138 1139 3884
1138 3033 3767
1139 1140 850
1139 3331 2187
1140 1141 2255
1141 1142 345
1142 1143 4756
1143 1144 4157
1144 1145 4181
1145 1146 154
1146 1147 3929
1147 1148 2626
1147 3153 3976
1148 1149 2672
1148 3354 1487
1149 1150 4278
1150 1151 4169
1150 3300 3166
1151 1152 2803
1152 1153 1152
1153 1154 1311
1154 1155 776
1155 1156 4028
1156 1157 4877
1157 1158 1800
1158 1159 1381
1158 3312 2240
1159 1160 2238
1160 1161 268
1161 1162 4513
1162 1163 4784
1163 1164 2573
1164 1165 2884
1165 1166 701
1166 1167 1027
1166 3499 2833
1167 1168 2383
1168 1169 1907
1169 1170 1748
1169 3377 2132
1170 1171 658
1171 1172 3526
1171 3191 1868
1172 1173 800
1173 1174 2032
1174 1175 4199
1175 1176 2895
1175 3117 587
1176 1177 1832
1177 1178 3457
1178 1179 4120
1179 1180 1998
1180 1181 120
1181 1182 4013
1181 3078 945
1182 1183 2844
1183 1184 572
1184 1185 808
1185 1186 4072
1186 1187 1597
1186 3449 2158
1187 1188 877
1188 1189 4001
1189 1190 1308
1189 3257 3480
1190 1191 3090
1190 3217 2572
1191 1192 2628
1192 1193 29
1192 2871 850
1193 1194 4483
1194 1195 4340
1195 1196 4514
1195 3327 2260
1196 1197 3222
1197 1198 1394
1198 1199 2240
1199 1200 1630
1199 2749 4405
1200 1201 4045
1200 3292 1647
1201 1202 3488
1201 2738 3327
1202 1203 3649
1203 1204 4924
1204 1205 2885
1205 1206 2082
1205 2886 4032
1206 1207 4945
1207 1208 2234
1208 1209 1319
1208 3014 817
1208 3226 2320
1209 1210 4138
1210 1211 4864
1211 1212 2871
1211 3441 2771
1212 1213 3206
1213 1214 1966
1214 1215 3986
1215 1216 1276
1216 1217 2670
1217 1218 2286
1218 1219 2535
1219 1220 1682
1219 3434 1197
1220 1221 4277
1220 3431 1134
1221 1222 4367
1221 3494 3079
1222 1223 4791
1223 1224 1052
1223 2792 1928
1224 1225 4851
1225 1226 3478
1225 3372 2458
1226 1227 1067
1227 1228 557
1228 1229 3569
1229 1230 1423
1230 1231 3093
1231 1232 324
1231 2927 1944
1231 3445 4203
1232 1233 3292
1233 1234 3234
1233 2837 964
1234 1235 4366
1235 1236 4535
1235 2761 3357
1235 3461 4290
1236 1237 2625
1236 2909 1660
1237 1238 4187
1238 1239 977
1239 1240 1833
1239 3173 4434
1240 1241 4039
1241 1242 2852
1241 2869 844
1242 1243 4040
1243 1244 2403
1243 3392 1388
1244 1245 2894
1245 1246 4000
1245 2874 1240
1245 3135 3517
1246 1247 2688
1247 1248 4562
1247 3222 3071
1248 1249 2364
1249 1250 922
1250 1251 2071
1251 1252 3378
1252 1253 4809
1253 1254 3254
1254 1255 4884
1255 1256 3804
1255 3108 3376
1255 3203 4552
1256 1257 4893
1256 2885 1432
1257 1258 3060
1258 1259 1010
1259 1260 3186
1260 1261 3459
1260 3349 4139
1261 1262 335
1262 1263 1353
1263 1264 2756
1263 3626 760
1264 1265 4543
1264 2855 1706
1265 1266 1724
1266 1267 723
1266 2968 4874
1267 1268 2892
1268 1269 1745
1269 1270 41
1270 1271 2789
1271 1272 1950
1271 2923 826
1272 1273 4969
1273 1274 1923
1274 1275 4982
1274 3391 1201
1275 1276 667
1275 2839 64
1276 1277 993
1277 1278 4052
1277 3221 2642
1278 1279 3576
1279 1280 3782
1280 1281 3450
1281 1282 1724
1281 3495 4256
1282 1283 2535
1283 1284 3626
1284 1285 2441
1285 1286 1766
1285 3007 1095
1286 1287 3233
1287 1288 1306
1288 1289 539
1289 1290 2725
1289 3627 4509
1290 1291 920
1290 2939 92
1291 1292 3661
1292 1293 3518
1292 3062 1412
1293 1294 749
1294 1295 3865
1295 1296 4461
1295 3544 3255
1295 3606 2131
1296 1297 466
1297 1298 1804
1298 1299 2635
1299 1300 767
1300 1301 4930
1300 3006 3657
1301 1302 3805
1302 1303 3938
1303 1304 1201
1304 1305 4190
1304 3525 4795
1305 1306 1674
1306 1307 1856
1307 1308 1572
1308 1309 114
1309 1310 731
1310 1311 4935
1310 3181 3237
1311 1312 592
1312 1313 695
1313 1314 3661
1314 1315 2168
1315 1316 3782
1316 1317 4216
1317 1318 31
1318 1319 2276
1319 1320 4976
1320 1321 4957
1321 1322 3984
1322 1323 3902
1323 1324 1292
1324 1325 4000
1325 1326 3548
1326 1327 1476
1327 1328 308
1328 1329 890
1329 1330 3999
1330 1331 782
1331 1332 3097
1332 1333 3133
1333 1334 4382
1334 1335 1376
1334 3520 3060
1335 1336 4412
1336 1337 167
1337 1338 1974
1338 1339 2894
1339 1340 1300
1340 1341 4568
1341 1342 3028
1342 1343 2537
1343 1344 4431
1343 2954 745
1344 1345 4717
1345 1346 4861
1346 1347 2949
1347 1348 1601
1348 1349 3875
1348 3456 1305
1349 1350 733
1349 3122 2128
1350 1351 2722
1351 1352 2726
1351 3186 66
1352 1353 481
1352 3411 3748
1353 1354 2721
1354 1355 1924
1354 2976 59
1355 1356 4183
1356 1357 4861
1357 1358 4949
1358 1359 1843
1359 1360 987
1360 1361 2184
1361 1362 3484
1362 1363 2726
1363 1364 1375
1364 1365 4743
1365 1366 762
1366 1367 4955
1367 1368 4350
1368 1369 1300
1369 1370 147
1370 1371 769
1370 3080 2401
1370 3607 3752
1371 1372 605
1371 3256 4178
1372 1373 3784
1372 3149 3312
1373 1374 3747
1374 1375 2811
1375 1376 1221
1375 2730 802
1375 3316 325
1376 1377 728
1376 3230 4177
1377 1378 2389
1378 1379 1883
1378 3165 3620
1379 1380 1206
1379 2818 4224
1380 1381 4817
1380 3406 2527
1381 1382 3164
1382 1383 2605
1382 3092 2469
1383 1384 3953
1384 1385 3055
1385 1386 4123
1386 1387 4768
1387 1388 159
1388 1389 3290
1389 1390 101
1390 1391 2778
1391 1392 3583
1392 1393 1441
1393 1394 1031
1394 1395 4999
1394 2815 27
1395 1396 1391
1396 1397 2019
1396 2757 2162
1396 3027 2594
1397 1398 1476
1398 1399 554
1399 1400 232
1400 1401 793
1401 1402 3458
1402 1403 3987
1402 3337 554
1403 1404 4499
1404 1405 684
1405 1406 2093
1406 1407 4061
1406 2873 927
1407 1408 2182
1408 1409 2268
1409 1410 2907
1410 1411 3382
1411 1412 2796
1412 1413 3097
1412 2936 2712
1413 1414 4236
1413 3376 1616
1414 1415 3270
1415 1416 139
1416 1417 4192
1417 1418 1903
1417 2945 2225
1418 1419 2836
1418 2737 546
1419 1420 3889
1420 1421 1626
1421 1422 3801
1422 1423 2820
1422 3263 3006
1423 1424 4577
1424 1425 1314
1425 1426 2812
1426 1427 4240
1426 3357 2901
1427 1428 2308
1428 1429 2670
1429 1430 4245
1430 1431 3881
1430 3576 1251
1431 1432 1002
1431 2829 17
1432 1433 1079
1433 1434 2953
1434 1435 641
1435 1436 1286
1435 3150 4897
1436 1437 4
1437 1438 4685
1437 2773 4166
1438 1439 3373
1439 1440 4576
1440 1441 1357
1441 1442 2007
1442 1443 582
1443 1444 2176
1444 1445 4170
1445 1446 1459
1445 2824 99
1446 1447 969
1447 1448 965
1448 1449 2894
1449 1450 2068
1449 3608 3380
1450 1451 4393
1451 1452 782
1452 1453 1098
1453 1454 2865
1453 3050 35
1454 1455 981
1454 3170 1769
1465 3175 1558
1468 3394 3953
1477 3103 1742
1483 2991 2801
1488 2982 3709
1490 2751 1810
1495 2754 482
1496 3433 725
1499 2888 679
1507 3116 2328
1509 2841 4209
1530 3060 1672
1535 3058 1329
1538 3074 3176
1540 3380 1094
1555 3352 1883
1562 2980 2581
1566 3247 3767
1569 3262 2707
1572 3188 420
1573 3176 3516
1574 3140 3294
1577 2840 4228
1578 2876 4750
1578 3573 3643
1579 3223 4288
1579 3539 4686
1590 2878 2398
1591 3425 3798
1594 3049 3986
1594 3398 2101
1596 3443 4073
1599 2937 1870
1605 3555 214
1608 3011 2316
1611 3393 3129
1628 2894 1172
1632 3496 3630
1637 3604 2770
1639 3489 2012
1643 3052 4105
1649 2962 1764
1660 2914 588
1663 2903 1985
1668 2987 2114
1668 3355 3050
1671 3294 1268
1675 2802 2589
1676 2850 3060
1679 3109 565
1682 3572 1529
1682 3587 1513
1694 3497 3047
1697 2762 1651
1697 3075 2604
1699 3145 4015
1702 2984 4610
1703 2803 2207
1703 3365 2533
1709 2940 1043
1709 3086 1848
1713 3132 4860
1716 3088 587
1719 2826 1723
1727 3192 3913
1729 2801 3298
1732 3084 4339
1734 2913 1103
1736 3076 3908
1737 3112 3750
1738 2957 3754
1747 2931 69
1748 3118 212
1751 3013 4142
1758 3511 1620
1767 3444 1040
1771 2848 605
1779 2740 4140
1784 3210 1583
1785 3081 4159
1786 3026 478
1788 2958 4199
1788 3228 2138
1789 3521 4285
1791 2736 4798
1791 2947 1596
1791 3054 1769
1792 2814 978
1794 3138 3853
1808 3218 1802
1811 2985 3652
1813 3602 2910
1818 3121 3294
1821 3045 2324
1824 3613 4166
1827 3565 4986
1830 3611 3002
1831 2836 1152
1833 2793 299
1838 2870 2391
1838 3207 1455
1839 2777 2154
1840 3120 4790
1842 3190 2501
1844 3283 4237
1846 3105 3283
1851 3633 4262
1860 2864 3591
1862 3421 957
1866 2845 1064
1870 3478 3116
1872 3310 55
1875 2797 2548
1875 3030 1120
1875 3279 1141
1892 3079 2289
1896 3219 306
1899 3275 2240
1902 2775 1548
1902 3432 473
1904 2783 3460
1905 3197 77
1909 3588 3034
1915 2806 2178
1916 2835 39
1923 3248 2475
1926 3010 3980
1927 3362 4920
1931 3083 282
1939 3025 427
1941 3144 2792
1947 3242 3219
1947 3534 546
1949 2990 2354
1954 2741 3045
1956 3304 4479
1958 2935 2778
1958 3547 3017
1960 3324 2015
1967 2924 4217
1972 2729 1792
1972 3161 4151
1972 3415 947
1975 2981 1766
1976 3143 4911
1978 3255 4247
1980 3286 4931
1985 3147 4228
1992 2769 3674
1994 2743 2058
2004 3119 4571
2006 3487 3937
2007 3361 2312
2011 3424 3995
2013 2952 1050
2013 3476 4023
2014 2759 4734
2017 3047 1683
2020 3224 326
2031 2734 4305
2032 2747 1303
2034 3569 864
2036 2997 162
2038 2883 3969
2044 3249 3086
2050 2823 2900
2058 3156 2830
2058 3452 1741
2059 2953 85
2060 3232 2329
2062 3322 4095
2066 3390 1434
2070 3589 4231
2075 3164 700
2093 2887 4898
2099 2810 1877
2102 3436 773
2108 3296 2069
2109 3087 852
2111 2904 2870
2112 3418 2914
2114 2911 1871
2114 3532 3158
2118 2868 1775
2120 3314 3257
2120 3459 3447
2123 3624 2651
2125 3089 22
2128 3369 483
2131 3009 2971
2138 3151 1383
2147 2930 279
2155 3591 230
2156 3096 4133
2160 2934 1670
2162 2977 1196
2180 2860 1805
2180 2963 2020
2182 3287 3851
2183 3273 672
2187 3159 3149
2191 2731 2771
2192 3016 2670
2193 3000 2984
2196 3035 2629
2204 2807 745
2206 3069 3324
2206 3307 4358
2207 3111 300
2210 3340 2933
2212 3371 2656
2219 2785 2945
2220 3001 322
2220 3252 391
2221 3017 3667
2222 2920 733
2222 3325 574
2223 2763 3724
2236 2858 288
2243 2813 249
2245 2842 1801
2250 3399 2937
2252 3559 657
2272 2758 3073
2273 3632 422
2275 3107 1408
2279 3288 1793
2284 3077 4441
2288 2753 187
2295 3172 2762
2296 3612 135
2297 2831 3206
2301 2849 423
2303 3098 3267
2308 3386 3901
2315 2993 1431
2316 3211 940
2317 3552 420
2321 2933 3567
2321 3129 3164
2326 2816 4735
2328 2844 440
2329 3277 4261
2332 3341 2279
2332 3480 733
2333 2834 696
2333 3378 2429
2337 3068 1516
2340 3178 2855
2344 3467 3797
2345 2746 639
2348 3245 4538
2352 3160 4329
2362 3131 3422
2368 3345 2440
2369 3422 3071
2372 3501 1393
2373 3356 4264
2375 3046 3666
2376 3102 2380
2379 2733 4960
2380 3370 2769
2388 3400 2129
2389 3291 4175
2389 3298 4860
2392 2820 3131
2393 3041 625
2395 2744 692
2405 3471 4631
2408 2955 1871
2410 3493 3669
2414 3285 3232
2417 3592 2814
2422 2756 679
2423 3220 887
2423 3527 857
2433 3460 2060
2438 3040 2503
2438 3595 2474
2444 3072 128
2451 3137 2698
2452 3509 4475
2458 3044 2024
2464 3491 3001
2469 3311 3455
2469 3475 345
2471 3194 906
2474 3267 1763
2480 3214 3997
2481 3593 3003
2494 2821 2443
2498 3234 1625
2511 3244 52
2511 3381 1310
2512 2791 3118
2520 2760 3981
2524 3274 3415
2529 3099 745
2535 3290 2756
2535 3374 3718
2535 3458 3661
2544 2863 4567
2548 3048 3329
2552 3261 3934
2555 3603 315
2559 2833 2636
2560 2788 4994
2560 3541 3192
2564 3127 500
2565 2994 317
2571 3342 3703
2574 2780 3555
2574 2851 1728
2577 3070 4463
2584 3498 2966
2588 3196 1058
2589 3018 914
2591 3313 2139
2593 2865 2833
2595 3106 12
2602 3636 178
2609 3126 4609
2609 3548 3129
2612 3462 1297
2617 2752 3132
2620 3022 3844
2622 3562 2822
2627 2817 413
2631 3373 3626
2633 3318 2014
2633 3353 2233
2637 3375 2482
2641 2882 1622
2641 2965 697
2642 2857 4925
2650 3596 824
2656 2929 4836
2659 2786 1677
2669 2854 3135
2678 3305 761
2681 3259 2089
2687 3100 4517
2695 3095 2288
2699 2735 1057
2699 2852 3082
2705 3563 2639
2707 3338 1663
2710 3492 4177
2727 3090 3252
2728 3004 128
2731 3528 1720
2733 2798 1708
2734 2925 490
2734 3162 23
2742 3402 2121
2744 3332 54
2744 3387 1285
2745 3182 4612
2748 2972 2716
2754 3169 511
2755 2808 1320
2759 2884 1064
2778 2875 4667
2790 3571 315
2792 3575 2902
2793 3550 539
2796 2918 3230
2802 2861 2603
2802 3420 744
2808 2872 17
2810 3272 784
2816 3580 827
2824 3021 1371
2825 2896 2073
2826 3134 3418
2826 3468 4543
2834 2970 4457
2834 3623 2528
2836 3343 1200
2838 3625 2177
2840 3554 1077
2857 2880 3902
2863 3529 1108
2865 3303 4459
2866 3037 1690
2866 3517 2874
2868 3241 4875
2871 3012 485
2872 3031 4798
2882 3384 640
2894 3382 38
2896 3212 606
2901 2989 2143
2904 3113 1555
2914 3423 2422
2915 3350 581
2917 2967 3703
2920 3513 3014
2923 2943 888
2924 3250 4828
2924 3293 1443
2936 3193 1082
2953 3206 536
2957 3416 700
2958 3185 1019
2962 3448 562
2964 3289 1778
2965 3246 3207
2966 2971 3180
2968 3055 3976
2969 3073 929
2974 3155 919
2975 3032 3284
2979 3388 1108
2984 3396 4168
2994 3344 3455
2997 3295 2583
3003 3056 2895
3005 3635 2370
3007 3615 1504
3009 3315 1722
3019 3379 1775
3019 3472 1422
3020 3629 3953
3023 3066 3489
3024 3051 2921
3025 3142 4989
3026 3367 2569
3035 3549 4174
3044 3336 1667
3045 3306 484
3051 3097 2497
3052 3251 1297
3056 3450 3534
3058 3239 1628
3060 3163 2833
3061 3128 452
3071 3339 3867
3073 3426 1399
3076 3359 4657
3077 3481 215
3090 3254 659
3092 3502 4237
3111 3208 4729
3115 3334 2995
3117 3231 1907
3117 3265 1042
3122 3586 2640
3130 3477 3638
3132 3168 361
3137 3243 2347
3140 3500 3354
3154 3545 3013
3168 3282 3228
3179 3199 4194
3181 3486 3068
3183 3264 2141
3191 3284 4997
3191 3619 4772
3195 3368 2513
3211 3577 4500
3214 3628 2595
3238 3253 742
3249 3321 4217
3253 3442 4288
3262 3560 2980
3264 3413 1659
3264 3540 1259
3278 3474 3127
3286 3570 2441
3288 3599 3664
3299 3582 1646
3314 3414 2420
3327 3622 1043
3346 3454 4906
3360 3485 510
3367 3581 2450
3379 3566 3512
3388 3584 1436
3408 3574 3732
3423 3510 4592
3423 3530 4511
3439 3585 383
3450 3605 2368
3496 3538 373
3562 3617 1148
3572 3578 82
779 391
3415 3304
2090 138
2733 3114
1469 2900
356 2557
1205 3289
2176 1697
3272 1339
2503 426
2027 814
1608 2025
793 791
800 327
1565 2721
</code></pre>
<h1 id="输出样例">输出样例</h1>
<pre><code>NO
NO
NO
NO
NO
NO
NO
YES
NO
NO
NO
NO
YES
NO
YES
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于NOIP的暂停和恢复]]></title>
        <id>https://qz-cqy.github.io/post/noip-death-and-rebirth</id>
        <link href="https://qz-cqy.github.io/post/noip-death-and-rebirth">
        </link>
        <updated>2020-01-21T13:21:21.000Z</updated>
        <content type="html"><![CDATA[<h1 id="背景">背景</h1>
<p><a href="https://www.ccf.org.cn/c/2019-08-16/668162.shtml">CCF关于暂停NOIP竞赛的公告——2019/08/16</a></p>
<p><a href="https://www.ccf.org.cn/c/2020-01-21/694716.shtml">CCF关于恢复NOIP竞赛的公告——2020/01/21</a></p>
<h1 id="如何看待">如何看待</h1>
<ol>
<li><s>暂停NOIP是被机惨的结果，至于恢复，是一套说辞罢了，不要在意</s></li>
<li>把CSP2019的证书当成绝版吧！NOIP恢复了，CSP-J/S会不复存在！</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 P5876@洛谷 【化简单词】]]></title>
        <id>https://qz-cqy.github.io/post/solution-luogu-p5876</id>
        <link href="https://qz-cqy.github.io/post/solution-luogu-p5876">
        </link>
        <updated>2020-01-15T05:51:15.000Z</updated>
        <content type="html"><![CDATA[<p>看来前面题解的各种做法（其实也就两种），我决定给你们写一篇STL的。</p>
<h3 id="介绍一下使用的函数substr">介绍一下使用的函数：<code>substr()</code></h3>
<p>这个函数有两个参数，第一个是起始位置，第二个是子串长度，作用是取字符串的一部分，返回值为这段的内容。用法：</p>
<pre><code class="language-cpp">string s;
s.substr(0, 5);
</code></pre>
<p>表示取字符串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span> 的前五位。</p>
<h3 id="看一眼数据范围">看一眼数据范围</h3>
<p>发现可以暴力！于是就有了下面的思路：</p>
<blockquote>
<p>枚举每个字符串，枚举前缀位数，判断这个前缀是否也是其他字符串的前缀：如果是，前缀位数加一，继续判断；如果不是，说明找到了最短的前缀，输出。</p>
</blockquote>
<h3 id="你们最爱的代码">你们最爱的代码</h3>
<pre><code class="language-cpp">//By: Luogu@rui_er(122461)
#include &lt;bits/stdc++.h&gt;
using namespace std;

int main()
{
	int n;
	cin&gt;&gt;n;
	string s[51];
	for(int i=1;i&lt;=n;i++) cin&gt;&gt;s[i];
	for(int i=1;i&lt;=n;i++)
	{
		for(int j=1;j&lt;=s[i].length();j++)
		{
			bool book = true;
			for(int k=1;k&lt;=n;k++)
			{
				if(k == i) continue;
				if(s[i].substr(0, j) == s[k].substr(0, j))
				{
					book = false;
					break;
				}
			}
			if(book)
			{
				cout&lt;&lt;s[i].substr(0, j)&lt;&lt;endl;
				break;
			}
		}
	}
	return 0;
}
</code></pre>
<p>实测AC。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【项目】膜拜rui_er]]></title>
        <id>https://qz-cqy.github.io/post/orz-cqy</id>
        <link href="https://qz-cqy.github.io/post/orz-cqy">
        </link>
        <updated>2020-01-09T11:19:37.000Z</updated>
        <content type="html"><![CDATA[<p>网址：<a href="https://qzcf.github.io/dalao/CQYAKIOI_upd.html">膜拜rui_er</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[五分钟搭建属于自己的博客[TOP]]]></title>
        <id>https://qz-cqy.github.io/post/building-a-blog</id>
        <link href="https://qz-cqy.github.io/post/building-a-blog">
        </link>
        <updated>2020-01-08T09:14:22.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>注：由于图片使用洛谷图床，有些图片可能会很慢甚至加载不出来，可以前往<a href="https://ak-ioi.blog.luogu.org/building-a-blog#">洛谷博客</a>查看</p>
</blockquote>
<h1 id="0-优点和缺点">0 优点和缺点</h1>
<p>优点：</p>
<ul>
<li>使用简单</li>
<li>无需写任何代码</li>
<li>快捷、方便</li>
<li>离线编辑博客，随时写，随时传</li>
<li>主题美观、多样</li>
<li>……</li>
</ul>
<p>缺点：</p>
<ul>
<li>由于是比较新的软件，可能会有些东西没有详细说明（但是大多数经常使用的都已经在下面介绍了，所以不用怕）</li>
<li>……</li>
</ul>
<p>看完这么多优点，是不是很想要呢？那就接着往下看吧！这么好的一个东西，你值得拥有！</p>
<h1 id="1-准备工作">1 准备工作</h1>
<ul>
<li>
<p>下载git</p>
</li>
<li>
<p>准备一个自己的空网站（可以不是顶级域名），如果你已经有了，并且对Github的操作比较熟悉，你可以跳过下面的指导，直接进入第二部分。</p>
</li>
</ul>
<h2 id="11-不想付钱怎么办">1.1 不想付钱怎么办</h2>
<p>如果你还没有自己的空网站，在<a href="https://www.github.com">Github</a>创建是一个不错的选择。这样创建出来的网站会长成这个样子：<code>https://xxx.github.io</code>（比如我的就是https://qz-cqy.github.io）。首先，你需要在Github上创建一个账号。这个注册方法和正常网站没有太大区别，我在这里就不详细讲解了。如果不清楚，可以到<a href="https://git-scm.com/book/zh/v2/GitHub-%E8%B4%A6%E6%88%B7%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AE">这个博客</a>看一下，我认为讲的还是不错的。</p>
<p>有了Github账号以后，我们创建一个仓库。仓库名称设置成<code>账号名称.github.io</code>，然后选择“创建空仓库”选项，设置为<strong>公开仓库</strong>，就可以进入编写界面了。你可以看到你写的代码，例如<a href="https://www.github.com/qz-cqy/qz-cqy.github.io">我的项目</a>。神犇们可以自己写html的代码，搭建出漂亮的网页，但如果我们不会，怎么办呢？</p>
<h1 id="2-安装博客静态写作软件gridea">2 安装博客静态写作软件Gridea</h1>
<p><a href="https://www.gridea.dev">Gridea官网</a></p>
<p>这里可以下载不同操作系统（Mac OS/Windows/Linux）下的程序。下面我以Windows系统为例讲解。</p>
<h2 id="21-如何下载">2.1 如何下载</h2>
<p>进入官网以后，你将看到如下画面：</p>
<figure data-type="image" tabindex="1"><img src="https://cdn.luogu.com.cn/upload/image_hosting/j6asmvst.png" alt="" loading="lazy"></figure>
<p>接下来单击中间的按钮：</p>
<figure data-type="image" tabindex="2"><img src="https://cdn.luogu.com.cn/upload/image_hosting/jh2lbj06.png" alt="" loading="lazy"></figure>
<p>就会自动下载。</p>
<h2 id="22-下载以后">2.2 下载以后</h2>
<p>下载后双击运行博客部署程序，会在桌面建立快捷方式，双击进去就可以写博客了。让我们先来熟悉一下每个选项的用处。</p>
<h2 id="23-熟悉操作">2.3 熟悉操作</h2>
<p>这里，我们可以看到左边有五个栏目：文章、菜单、标签、主题、远程。</p>
<h3 id="231-文章栏目">2.3.1 文章栏目</h3>
<p>文章栏目会显示所有写过的文章（如下图）。</p>
<figure data-type="image" tabindex="3"><img src="https://cdn.luogu.com.cn/upload/image_hosting/dq0w5ovm.png" alt="" loading="lazy"></figure>
<p>我们看到右上角有一个<strong>加号</strong>，单击进去就可以写文章了。里面使用<strong>Markdown</strong>编写，使用方法参见<a href="https://www.luogu.com.cn/blog/luogu/how-to-use-markdown">这里</a>，可能不完全一样，但大体上几乎相同。进入编辑文章界面后，将鼠标移动到右侧，会发现六个图标。上面写了功能简介。如果你对Markdown语法足够了解，那么你是不需要前四个按钮的。第五个用于更改URL、标签等设置，第六个用于预览。</p>
<p>写完文章以后，将鼠标移动到靠上的位置，出现三个图标：左箭头、黑勾和<strong>绿勾</strong>。左箭头用于退出，黑勾是存为草稿，绿勾是保存并发布。发布后页面不会自动跳转，需要点一下左箭头退出编辑。</p>
<h3 id="232-菜单栏目">2.3.2 菜单栏目</h3>
<p>菜单会在网页上标题下方显示，初始状态有四个菜单：首页、归档、标签、关于，在网页里可以找到他们的作用。加号用于新建菜单，里面有详细的说明和备注。这一栏目对我们的博客作用不大，且浅显易懂，在这里就不过多介绍了。</p>
<h3 id="233-标签栏目">2.3.3 标签栏目</h3>
<p>标签栏目用于管理文章的标签。新建文章时直接在上面2.3.1中介绍过的第五个按钮里加标签即可，不必手动添加。当一个标签下没有文章时，<strong>标签不会自动移除</strong>，会出现删除选项，手动移除。</p>
<h2 id="234-主题栏目">2.3.4 主题栏目</h2>
<figure data-type="image" tabindex="4"><img src="https://cdn.luogu.com.cn/upload/image_hosting/c8lb2uvj.png" alt="" loading="lazy"></figure>
<p>主题栏目主要是网站的设计。</p>
<p><strong>基础配置</strong>界面是关于网站样式的设计。默认含有四个主题，可前往官网预览，可以在<a href="https://www.gridea.dev/theme">这里</a>下载其他主题。</p>
<p><strong>自定义配置</strong>中是一些杂的网站样式设计，在里面有详细的备注，在这里不过多解释了。</p>
<p><strong>网页图标</strong>和<strong>头像配置</strong>就是更改网页图标和头像的，没有其他功能，大家可以自行探索。</p>
<h2 id="235-远程栏目">2.3.5 远程栏目</h2>
<p>如果你想要把博客放到网站上，这里非常重要！！！</p>
<p><strong>基础配置</strong>中，选择<code>Github Pages</code>就可以把你的Github地址传上去，用于更新博客。域名填写<code>https://xxx.github.io</code>，仓库写<code>xxx.github.io</code>，分支写<code>master</code>，仓库用户名写<code>xxx</code>，邮箱写你Github的注册邮箱，最后Token写你的密码就好了。至于CNAME，没什么用，直接空着即可。</p>
<p><strong>评论配置</strong>中你可以更改评论的设置，里面有教程，跟着教程走就好了。</p>
<h1 id="3-更新博客">3 更新博客</h1>
<p>每次更新完博客之后不会自动同步到网页，需要点击首页页面左下角的“同步”按钮，等不到一分钟就同步好了。Gridea会自动在输入的Github地址同步文件，同步期间全程不需要手动操作。</p>
<p>同步完以后，等一两分钟就可以在网页查看效果了。我的博客也是这么搭建的。不得不说，有了这个应用之后，在自己的网站上写博客非常方便，在这里给作者点个赞！</p>
<p>另外，也欢迎大家到<a href="https://qz-cqy.github.io">我的博客</a>来参观！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[背包九讲（转载）]]></title>
        <id>https://qz-cqy.github.io/post/pack-problem</id>
        <link href="https://qz-cqy.github.io/post/pack-problem">
        </link>
        <updated>2020-01-07T10:36:37.000Z</updated>
        <content type="html"><![CDATA[<h1 id="背包九讲">背包九讲</h1>
<h1 id="目录">目录</h1>
<p>第一讲 01背包问题<br>
第二讲 完全背包问题<br>
第三讲 多重背包问题<br>
第四讲 混合三种背包问题<br>
第五讲 二维费用的背包问题<br>
第六讲 分组的背包问题<br>
第七讲 有依赖的背包问题<br>
第八讲 泛化物品<br>
第九讲 背包问题问法的变化<br>
附：USACO中的背包问题</p>
<h1 id="前言">前言</h1>
<p>本篇文章是我(dd_engi)正在进行中的一个雄心勃勃的写作计划的一部分，这个计划的内容是写作一份较为完善的NOIP难度的动态规划总结，名为《解动态规划题的基本思考方式》。现在你看到的是这个写作计划最先发布的一部分。</p>
<p>背包问题是一个经典的动态规划模型。它既简单形象容易理解，又在某种程度上能够揭示动态规划的本质，故不少教材都把它作为动态规划部分的第一道例题，我也将它放在我的写作计划的第一部分。</p>
<p>读本文最重要的是思考。因为我的语言和写作方式向来不以易于理解为长，思路也偶有跳跃的地方，后面更有需要大量思考才能理解的比较抽象的内容。更重要的是：不大量思考，绝对不可能学好动态规划这一信息学奥赛中最精致的部分。</p>
<h1 id="目录-2">目录</h1>
<p>第一讲 01背包问题</p>
<p>这是最基本的背包问题，每个物品最多只能放一次。</p>
<p>第二讲 完全背包问题</p>
<p>第二个基本的背包问题模型，每种物品可以放无限多次。</p>
<p>第三讲 多重背包问题</p>
<p>每种物品有一个固定的次数上限。</p>
<p>第四讲 混合三种背包问题</p>
<p>将前面三种简单的问题叠加成较复杂的问题。</p>
<p>第五讲 二维费用的背包问题</p>
<p>一个简单的常见扩展。</p>
<p>第六讲 分组的背包问题</p>
<p>一种题目类型，也是一个有用的模型。后两节的基础。</p>
<p>第七讲 有依赖的背包问题</p>
<p>另一种给物品的选取加上限制的方法。</p>
<p>第八讲 泛化物品</p>
<p>我自己关于背包问题的思考成果，有一点抽象。</p>
<p>第九讲 背包问题问法的变化</p>
<p>试图触类旁通、举一反三。</p>
<p>附：USACO中的背包问题</p>
<p>给出 USACO Training 上可供练习的背包问题列表，及简单的解答。</p>
<h1 id="p01-01背包问题">P01: 01背包问题</h1>
<h2 id="题目">题目</h2>
<p>有N件物品和一个容量为V的背包。第i件物品的费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使价值总和最大。</p>
<h2 id="基本思路">基本思路</h2>
<p>这是最基础的背包问题，特点是：每种物品仅有一件，可以选择放或不放。</p>
<p>用子问题定义状态：即f[i][v]表示前i件物品恰放入一个容量为v的背包可以获得的最大价值。则其状态转移方程便是：</p>
<pre><code>f[i][v]=max{f[i-1][v],f[i-1][v-c[i]]+w[i]}
</code></pre>
<p>这个方程非常重要，基本上所有跟背包相关的问题的方程都是由它衍生出来的。所以有必要将它详细解释一下：“将前i件物品放入容量为v的背包中”这个子问题，若只考虑第i件物品的策略（放或不放），那么就可以转化为一个只牵扯前i-1件物品的问题。如果不放第i件物品，那么问题就转化为“前i-1件物品放入容量为v的背包中”，价值为f[i-1][v]；如果放第i件物品，那么问题就转化为“前i-1件物品放入剩下的容量为v-c[i]的背包中”，此时能获得的最大价值就是f[i-1][v-c[i]]再加上通过放入第i件物品获得的价值w[i]。</p>
<h2 id="优化空间复杂度">优化空间复杂度</h2>
<p>以上方法的时间和空间复杂度均为O(N*V)，其中时间复杂度基本已经不能再优化了，但空间复杂度却可以优化到O(V)。</p>
<p>先考虑上面讲的基本思路如何实现，肯定是有一个主循环i=1..N，每次算出来二维数组f[i][0..V]的所有值。那么，如果只用一个数组f[0..V]，能不能保证第i次循环结束后f[v]中表示的就是我们定义的状态f[i][v]呢？f[i][v]是由f[i-1][v]和f[i-1][v-c[i]]两个子问题递推而来，能否保证在推f[i][v]时（也即在第i次主循环中推f[v]时）能够得到f[i-1][v]和f[i-1][v-c[i]]的值呢？事实上，这要求在每次主循环中我们以v=V..0的顺序推f[v]，这样才能保证推f[v]时f[v-c[i]]保存的是状态f[i-1][v-c[i]]的值。伪代码如下：</p>
<pre><code>for i=1..N
    for v=V..0
        f[v]=max{f[v],f[v-c[i]]+w[i]};
</code></pre>
<p>其中的f[v]=max{f[v],f[v-c[i]]}一句恰就相当于我们的转移方程f[i][v]=max{f[i-1][v],f[i-1][v-c[i]]}，因为现在的f[v-c[i]]就相当于原来的f[i-1][v-c[i]]。如果将v的循环顺序从上面的逆序改成顺序的话，那么则成了f[i][v]由f[i][v-c[i]]推知，与本题意不符，但它却是另一个重要的背包问题P02最简捷的解决方案，故学习只用一维数组解01背包问题是十分必要的。</p>
<p>事实上，使用一维数组解01背包的程序在后面会被多次用到，所以这里抽象出一个处理一件01背包中的物品过程，以后的代码中直接调用不加说明。</p>
<p>过程ZeroOnePack，表示处理一件01背包中的物品，两个参数cost、weight分别表明这件物品的费用和价值。</p>
<pre><code>procedure ZeroOnePack(cost,weight)
    for v=V..cost
        f[v]=max{f[v],f[v-cost]+weight}
</code></pre>
<p>注意这个过程里的处理与前面给出的伪代码有所不同。前面的示例程序写成v=V..0是为了在程序中体现每个状态都按照方程求解了，避免不必要的思维复杂度。而这里既然已经抽象成看作黑箱的过程了，就可以加入优化。费用为cost的物品不会影响状态f[0..cost-1]，这是显然的。</p>
<p>有了这个过程以后，01背包问题的伪代码就可以这样写：</p>
<pre><code>for i=1..N
    ZeroOnePack(c[i],w[i]);
</code></pre>
<h2 id="初始化的细节问题">初始化的细节问题</h2>
<p>我们看到的求最优解的背包问题题目中，事实上有两种不太相同的问法。有的题目要求“恰好装满背包”时的最优解，有的题目则并没有要求必须把背包装满。一种区别这两种问法的实现方法是在初始化的时候有所不同。</p>
<p>如果是第一种问法，要求恰好装满背包，那么在初始化时除了f[0]为0其它f[1..V]均设为-∞，这样就可以保证最终得到的f[N]是一种恰好装满背包的最优解。</p>
<p>如果并没有要求必须把背包装满，而是只希望价格尽量大，初始化时应该将f[0..V]全部设为0。</p>
<p>为什么呢？可以这样理解：初始化的f数组事实上就是在没有任何物品可以放入背包时的合法状态。如果要求背包恰好装满，那么此时只有容量为0的背包可能被价值为0的nothing“恰好装满”，其它容量的背包均没有合法的解，属于未定义的状态，它们的值就都应该是-∞了。如果背包并非必须被装满，那么任何容量的背包都有一个合法解“什么都不装”，这个解的价值为0，所以初始时状态的值也就全部为0了。</p>
<p>这个小技巧完全可以推广到其它类型的背包问题，后面也就不再对进行状态转移之前的初始化进行讲解。</p>
<h2 id="小结">小结</h2>
<p>01背包问题是最基本的背包问题，它包含了背包问题中设计状态、方程的最基本思想，另外，别的类型的背包问题往往也可以转换成01背包问题求解。故一定要仔细体会上面基本思路的得出方法，状态转移方程的意义，以及最后怎样优化的空间复杂度。</p>
<h1 id="p02-完全背包问题">P02: 完全背包问题</h1>
<h2 id="题目-2">题目</h2>
<p>有N种物品和一个容量为V的背包，每种物品都有无限件可用。第i种物品的费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。</p>
<h2 id="基本思路-2">基本思路</h2>
<p>这个问题非常类似于01背包问题，所不同的是每种物品有无限件。也就是从每种物品的角度考虑，与它相关的策略已并非取或不取两种，而是有取0件、取1件、取2件……等很多种。如果仍然按照解01背包时的思路，令f[i][v]表示前i种物品恰放入一个容量为v的背包的最大权值。仍然可以按照每种物品不同的策略写出状态转移方程，像这样：</p>
<pre><code>f[i][v]=max{f[i-1][v-k*c[i]]+k*w[i]|0&lt;=k*c[i]&lt;=v}
</code></pre>
<p>这跟01背包问题一样有O(N*V)个状态需要求解，但求解每个状态的时间已经不是常数了，求解状态f[i][v]的时间是O(v/c[i])，总的复杂度是超过O(VN)的。</p>
<p>将01背包问题的基本思路加以改进，得到了这样一个清晰的方法。这说明01背包问题的方程的确是很重要，可以推及其它类型的背包问题。但我们还是试图改进这个复杂度。</p>
<h2 id="一个简单有效的优化">一个简单有效的优化</h2>
<p>完全背包问题有一个很简单有效的优化，是这样的：若两件物品i、j满足c[i]&lt;=c[j]且w[i]&gt;=w[j]，则将物品j去掉，不用考虑。这个优化的正确性显然：任何情况下都可将价值小费用高得j换成物美价廉的i，得到至少不会更差的方案。对于随机生成的数据，这个方法往往会大大减少物品的件数，从而加快速度。然而这个并不能改善最坏情况的复杂度，因为有可能特别设计的数据可以一件物品也去不掉。</p>
<p>这个优化可以简单的O(N^2)地实现，一般都可以承受。另外，针对背包问题而言，比较不错的一种方法是：首先将费用大于V的物品去掉，然后使用类似计数排序的做法，计算出费用相同的物品中价值最高的是哪个，可以O(V+N)地完成这个优化。这个不太重要的过程就不给出伪代码了，希望你能独立思考写出伪代码或程序。</p>
<h2 id="转化为01背包问题求解">转化为01背包问题求解</h2>
<p>既然01背包问题是最基本的背包问题，那么我们可以考虑把完全背包问题转化为01背包问题来解。最简单的想法是，考虑到第i种物品最多选V/c[i]件，于是可以把第i种物品转化为V/c[i]件费用及价值均不变的物品，然后求解这个01背包问题。这样完全没有改进基本思路的时间复杂度，但这毕竟给了我们将完全背包问题转化为01背包问题的思路：将一种物品拆成多件物品。</p>
<p>更高效的转化方法是：把第i种物品拆成费用为c[i]*2<sup>k、价值为w[i]*2</sup>k的若干件物品，其中k满足c[i]*2<sup>k&lt;=V。这是二进制的思想，因为不管最优策略选几件第i种物品，总可以表示成若干个2</sup>k件物品的和。这样把每种物品拆成O(log(V/c[i]))件物品，是一个很大的改进。</p>
<p>但我们有更优的O(VN)的算法。</p>
<p>O(VN)的算法</p>
<p>这个算法使用一维数组，先看伪代码：</p>
<pre><code>for i=1..N
    for v=0..V
        f[v]=max{f[v],f[v-cost]+weight}
</code></pre>
<p>你会发现，这个伪代码与P01的伪代码只有v的循环次序不同而已。为什么这样一改就可行呢？首先想想为什么P01中要按照v=V..0的逆序来循环。这是因为要保证第i次循环中的状态f[i][v]是由状态f[i-1][v-c[i]]递推而来。换句话说，这正是为了保证每件物品只选一次，保证在考虑“选入第i件物品”这件策略时，依据的是一个绝无已经选入第i件物品的子结果f[i-1][v-c[i]]。而现在完全背包的特点恰是每种物品可选无限件，所以在考虑“加选一件第i种物品”这种策略时，却正需要一个可能已选入第i种物品的子结果f[i][v-c[i]]，所以就可以并且必须采用v=0..V的顺序循环。这就是这个简单的程序为何成立的道理。</p>
<p>这个算法也可以以另外的思路得出。例如，基本思路中的状态转移方程可以等价地变形成这种形式：</p>
<pre><code>f[i][v]=max{f[i-1][v],f[i][v-c[i]]+w[i]}
</code></pre>
<p>将这个方程用一维数组实现，便得到了上面的伪代码。</p>
<p>最后抽象出处理一件完全背包类物品的过程伪代码，以后会用到：</p>
<pre><code>procedure CompletePack(cost,weight)
    for v=cost..V
        f[v]=max{f[v],f[v-c[i]]+w[i]}
</code></pre>
<h2 id="总结">总结</h2>
<p>完全背包问题也是一个相当基础的背包问题，它有两个状态转移方程，分别在“基本思路”以及“O(VN)的算法“的小节中给出。希望你能够对这两个状态转移方程都仔细地体会，不仅记住，也要弄明白它们是怎么得出来的，最好能够自己想一种得到这些方程的方法。事实上，对每一道动态规划题目都思考其方程的意义以及如何得来，是加深对动态规划的理解、提高动态规划功力的好方法。</p>
<h1 id="p03-多重背包问题">P03: 多重背包问题</h1>
<h2 id="题目-3">题目</h2>
<p>有N种物品和一个容量为V的背包。第i种物品最多有n[i]件可用，每件费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。</p>
<h2 id="基本算法">基本算法</h2>
<p>这题目和完全背包问题很类似。基本的方程只需将完全背包问题的方程略微一改即可，因为对于第i种物品有n[i]+1种策略：取0件，取1件……取n[i]件。令f[i][v]表示前i种物品恰放入一个容量为v的背包的最大权值，则有状态转移方程：</p>
<pre><code>f[i][v]=max{f[i-1][v-k*c[i]]+k*w[i]|0&lt;=k&lt;=n[i]}
</code></pre>
<p>复杂度是O(V*Σn[i])。</p>
<h2 id="转化为01背包问题">转化为01背包问题</h2>
<p>另一种好想好写的基本方法是转化为01背包求解：把第i种物品换成n[i]件01背包中的物品，则得到了物品数为Σn[i]的01背包问题，直接求解，复杂度仍然是O(V*Σn[i])。</p>
<p>但是我们期望将它转化为01背包问题之后能够像完全背包一样降低复杂度。仍然考虑二进制的思想，我们考虑把第i种物品换成若干件物品，使得原问题中第i种物品可取的每种策略——取0..n[i]件——均能等价于取若干件代换以后的物品。另外，取超过n[i]件的策略必不能出现。</p>
<p>方法是：将第i种物品分成若干件物品，其中每件物品有一个系数，这件物品的费用和价值均是原来的费用和价值乘以这个系数。使这些系数分别为1,2,4,...,2<sup>(k-1),n[i]-2</sup>k+1，且k是满足n[i]-2^k+1&gt;0的最大整数。例如，如果n[i]为13，就将这种物品分成系数分别为1,2,4,6的四件物品。</p>
<p>分成的这几件物品的系数和为n[i]，表明不可能取多于n[i]件的第i种物品。另外这种方法也能保证对于0..n[i]间的每一个整数，均可以用若干个系数的和表示，这个证明可以分0..2<sup>k-1和2</sup>k..n[i]两段来分别讨论得出，并不难，希望你自己思考尝试一下。</p>
<p>这样就将第i种物品分成了O(log n[i])种物品，将原问题转化为了复杂度为O(V*Σlog n[i])的01背包问题，是很大的改进。</p>
<p>下面给出O(log amount)时间处理一件多重背包中物品的过程，其中amount表示物品的数量：</p>
<pre><code>procedure MultiplePack(cost,weight,amount)
    if cost*amount&gt;=V
        CompletePack(cost,weight)
        return
    integer k=1
    while k&lt;num
        ZeroOnePack(k*cost,k*weight)
        amount=amount-k
        k=k*2
    ZeroOnePack(amount*cost,amount*weight)
</code></pre>
<p>希望你仔细体会这个伪代码，如果不太理解的话，不妨翻译成程序代码以后，单步执行几次，或者头脑加纸笔模拟一下，也许就会慢慢理解了。</p>
<p>O(VN)的算法</p>
<p>多重背包问题同样有O(VN)的算法。这个算法基于基本算法的状态转移方程，但应用单调队列的方法使每个状态的值可以以均摊O(1)的时间求解。由于用单调队列优化的DP已超出了NOIP的范围，故本文不再展开讲解。我最初了解到这个方法是在楼天成的“男人八题”幻灯片上。</p>
<h2 id="小结-2">小结</h2>
<p>这里我们看到了将一个算法的复杂度由O(V<em>Σn[i])改进到O(V</em>Σlog n[i])的过程，还知道了存在应用超出NOIP范围的知识的O(VN)算法。希望你特别注意“拆分物品”的思想和方法，自己证明一下它的正确性，并将完整的程序代码写出来。</p>
<h1 id="p04-混合三种背包问题">P04: 混合三种背包问题</h1>
<h2 id="问题">问题</h2>
<p>如果将P01、P02、P03混合起来。也就是说，有的物品只可以取一次（01背包），有的物品可以取无限次（完全背包），有的物品可以取的次数有一个上限（多重背包）。应该怎么求解呢？</p>
<h2 id="01背包与完全背包的混合">01背包与完全背包的混合</h2>
<p>考虑到在P01和P02中给出的伪代码只有一处不同，故如果只有两类物品：一类物品只能取一次，另一类物品可以取无限次，那么只需在对每个物品应用转移方程时，根据物品的类别选用顺序或逆序的循环即可，复杂度是O(VN)。伪代码如下：</p>
<pre><code>for i=1..N
    if 第i件物品是01背包
        for v=V..0
            f[v]=max{f[v],f[v-c[i]]+w[i]};
    else if 第i件物品是完全背包
        for v=0..V
            f[v]=max{f[v],f[v-c[i]]+w[i]};
再加上多重背包
</code></pre>
<p>如果再加上有的物品最多可以取有限次，那么原则上也可以给出O(VN)的解法：遇到多重背包类型的物品用单调队列解即可。但如果不考虑超过NOIP范围的算法的话，用P03中将每个这类物品分成O(log n[i])个01背包的物品的方法也已经很优了。</p>
<p>当然，更清晰的写法是调用我们前面给出的三个相关过程。</p>
<pre><code>for i=1..N
    if 第i件物品是01背包
        ZeroOnePack(c[i],w[i])
    else if 第i件物品是完全背包
        CompletePack(c[i],w[i])
    else if 第i件物品是多重背包
        MultiplePack(c[i],w[i],n[i])
</code></pre>
<p>在最初写出这三个过程的时候，可能完全没有想到它们会在这里混合应用。我想这体现了编程中抽象的威力。如果你一直就是以这种“抽象出过程”的方式写每一类背包问题的，也非常清楚它们的实现中细微的不同，那么在遇到混合三种背包问题的题目时，一定能很快想到上面简洁的解法，对吗？</p>
<h2 id="小结-3">小结</h2>
<p>有人说，困难的题目都是由简单的题目叠加而来的。这句话是否公理暂且存之不论，但它在本讲中已经得到了充分的体现。本来01背包、完全背包、多重背包都不是什么难题，但将它们简单地组合起来以后就得到了这样一道一定能吓倒不少人的题目。但只要基础扎实，领会三种基本背包问题的思想，就可以做到把困难的题目拆分成简单的题目来解决。</p>
<h1 id="p05-二维费用的背包问题">P05: 二维费用的背包问题</h1>
<h2 id="问题-2">问题</h2>
<p>二维费用的背包问题是指：对于每件物品，具有两种不同的费用；选择这件物品必须同时付出这两种代价；对于每种代价都有一个可付出的最大值（背包容量）。问怎样选择物品可以得到最大的价值。设这两种代价分别为代价1和代价2，第i件物品所需的两种代价分别为a[i]和b[i]。两种代价可付出的最大值（两种背包容量）分别为V和U。物品的价值为w[i]。</p>
<h2 id="算法">算法</h2>
<p>费用加了一维，只需状态也加一维即可。设f[i][v][u]表示前i件物品付出两种代价分别为v和u时可获得的最大价值。状态转移方程就是：</p>
<pre><code>f[i][v][u]=max{f[i-1][v][u],f[i-1][v-a[i]][u-b[i]]+w[i]}
</code></pre>
<p>如前述方法，可以只使用二维的数组：当每件物品只可以取一次时变量v和u采用逆序的循环，当物品有如完全背包问题时采用顺序的循环。当物品有如多重背包问题时拆分物品。这里就不再给出伪代码了，相信有了前面的基础，你能够自己实现出这个问题的程序。</p>
<h2 id="物品总个数的限制">物品总个数的限制</h2>
<p>有时，“二维费用”的条件是以这样一种隐含的方式给出的：最多只能取M件物品。这事实上相当于每件物品多了一种“件数”的费用，每个物品的件数费用均为1，可以付出的最大件数费用为M。换句话说，设f[v][m]表示付出费用v、最多选m件时可得到的最大价值，则根据物品的类型（01、完全、多重）用不同的方法循环更新，最后在f[0..V][0..M]范围内寻找答案。</p>
<h2 id="小结-4">小结</h2>
<p>当发现由熟悉的动态规划题目变形得来的题目时，在原来的状态中加一纬以满足新的限制是一种比较通用的方法。希望你能从本讲中初步体会到这种方法。</p>
<h1 id="p06-分组的背包问题">P06: 分组的背包问题</h1>
<h2 id="问题-3">问题</h2>
<p>有N件物品和一个容量为V的背包。第i件物品的费用是c[i]，价值是w[i]。这些物品被划分为若干组，每组中的物品互相冲突，最多选一件。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。</p>
<h2 id="算法-2">算法</h2>
<p>这个问题变成了每组物品有若干种策略：是选择本组的某一件，还是一件都不选。也就是说设f[k][v]表示前k组物品花费费用v能取得的最大权值，则有：</p>
<pre><code>f[k][v]=max{f[k-1][v],f[k-1][v-c[i]]+w[i]|物品i属于第k组}
</code></pre>
<p>使用一维数组的伪代码如下：</p>
<pre><code>for 所有的组k
    for v=V..0
        for 所有的i属于组k
            f[v]=max{f[v],f[v-c[i]]+w[i]}
</code></pre>
<p>注意这里的三层循环的顺序，甚至在本文的beta版中我自己都写错了。“for v=V..0”这一层循环必须在“for 所有的i属于组k”之外。这样才能保证每一组内的物品最多只有一个会被添加到背包中。</p>
<p>另外，显然可以对每组内的物品应用P02中“一个简单有效的优化”。</p>
<h2 id="小结-5">小结</h2>
<p>分组的背包问题将彼此互斥的若干物品称为一个组，这建立了一个很好的模型。不少背包问题的变形都可以转化为分组的背包问题（例如P07），由分组的背包问题进一步可定义“泛化物品”的概念，十分有利于解题。</p>
<h1 id="p07-有依赖的背包问题">P07: 有依赖的背包问题</h1>
<h2 id="简化的问题">简化的问题</h2>
<p>这种背包问题的物品间存在某种“依赖”的关系。也就是说，i依赖于j，表示若选物品i，则必须选物品j。为了简化起见，我们先设没有某个物品既依赖于别的物品，又被别的物品所依赖；另外，没有某件物品同时依赖多件物品。</p>
<h2 id="算法-3">算法</h2>
<p>这个问题由NOIP2006金明的预算方案一题扩展而来。遵从该题的提法，将不依赖于别的物品的物品称为“主件”，依赖于某主件的物品称为“附件”。由这个问题的简化条件可知所有的物品由若干主件和依赖于每个主件的一个附件集合组成。</p>
<p>按照背包问题的一般思路，仅考虑一个主件和它的附件集合。可是，可用的策略非常多，包括：一个也不选，仅选择主件，选择主件后再选择一个附件，选择主件后再选择两个附件……无法用状态转移方程来表示如此多的策略。（事实上，设有n个附件，则策略有2^n+1个，为指数级。）</p>
<p>考虑到所有这些策略都是互斥的（也就是说，你只能选择一种策略），所以一个主件和它的附件集合实际上对应于P06中的一个物品组，每个选择了主件又选择了若干个附件的策略对应于这个物品组中的一个物品，其费用和价值都是这个策略中的物品的值的和。但仅仅是这一步转化并不能给出一个好的算法，因为物品组中的物品还是像原问题的策略一样多。</p>
<p>再考虑P06中的一句话： 可以对每组中的物品应用P02中“一个简单有效的优化”。 这提示我们，对于一个物品组中的物品，所有费用相同的物品只留一个价值最大的，不影响结果。所以，我们可以对主件i的“附件集合”先进行一次01背包，得到费用依次为0..V-c[i]所有这些值时相应的最大价值f'[0..V-c[i]]。那么这个主件及它的附件集合相当于V-c[i]+1个物品的物品组，其中费用为c[i]+k的物品的价值为f'[k]+w[i]。也就是说原来指数级的策略中有很多策略都是冗余的，通过一次01背包后，将主件i转化为V-c[i]+1个物品的物品组，就可以直接应用P06的算法解决问题了。</p>
<h2 id="较一般的问题">较一般的问题</h2>
<p>更一般的问题是：依赖关系以图论中“森林”的形式给出（森林即多叉树的集合），也就是说，主件的附件仍然可以具有自己的附件集合，限制只是每个物品最多只依赖于一个物品（只有一个主件）且不出现循环依赖。</p>
<p>解决这个问题仍然可以用将每个主件及其附件集合转化为物品组的方式。唯一不同的是，由于附件可能还有附件，就不能将每个附件都看作一个一般的01背包中的物品了。若这个附件也有附件集合，则它必定要被先转化为物品组，然后用分组的背包问题解出主件及其附件集合所对应的附件组中各个费用的附件所对应的价值。</p>
<p>事实上，这是一种树形DP，其特点是每个父节点都需要对它的各个儿子的属性进行一次DP以求得自己的相关属性。这已经触及到了“泛化物品”的思想。看完P08后，你会发现这个“依赖关系树”每一个子树都等价于一件泛化物品，求某节点为根的子树对应的泛化物品相当于求其所有儿子的对应的泛化物品之和。</p>
<h2 id="小结-6">小结</h2>
<p>NOIP2006的那道背包问题我做得很失败，写了上百行的代码，却一分未得。后来我通过思考发现通过引入“物品组”和“依赖”的概念可以加深对这题的理解，还可以解决它的推广问题。用物品组的思想考虑那题中极其特殊的依赖关系：物品不能既作主件又作附件，每个主件最多有两个附件，可以发现一个主件和它的两个附件等价于一个由四个物品组成的物品组，这便揭示了问题的某种本质。</p>
<p>我想说：失败不是什么丢人的事情，从失败中全无收获才是。</p>
<h1 id="p08-泛化物品">P08: 泛化物品</h1>
<h2 id="定义">定义</h2>
<p>考虑这样一种物品，它并没有固定的费用和价值，而是它的价值随着你分配给它的费用而变化。这就是泛化物品的概念。</p>
<p>更严格的定义之。在背包容量为V的背包问题中，泛化物品是一个定义域为0..V中的整数的函数h，当分配给它的费用为v时，能得到的价值就是h(v)。</p>
<p>这个定义有一点点抽象，另一种理解是一个泛化物品就是一个数组h[0..V]，给它费用v，可得到价值h[V]。</p>
<p>一个费用为c价值为w的物品，如果它是01背包中的物品，那么把它看成泛化物品，它就是除了h(c)=w其它函数值都为0的一个函数。如果它是完全背包中的物品，那么它可以看成这样一个函数，仅当v被c整除时有h(v)=v/c<em>w，其它函数值均为0。如果它是多重背包中重复次数最多为n的物品，那么它对应的泛化物品的函数有h(v)=v/c</em>w仅当v被c整除且v/c&lt;=n，其它情况函数值均为0。</p>
<p>一个物品组可以看作一个泛化物品h。对于一个0..V中的v，若物品组中不存在费用为v的的物品，则h(v)=0，否则h(v)为所有费用为v的物品的最大价值。P07中每个主件及其附件集合等价于一个物品组，自然也可看作一个泛化物品。</p>
<h2 id="泛化物品的和">泛化物品的和</h2>
<p>如果面对两个泛化物品h和l，要用给定的费用从这两个泛化物品中得到最大的价值，怎么求呢？事实上，对于一个给定的费用v，只需枚举将这个费用如何分配给两个泛化物品就可以了。同样的，对于0..V的每一个整数v，可以求得费用v分配到h和l中的最大价值f(v)。也即f(v)=max{h(k)+l(v-k)|0&lt;=k&lt;=v}。可以看到，f也是一个由泛化物品h和l决定的定义域为0..V的函数，也就是说，f是一个由泛化物品h和l决定的泛化物品。</p>
<p>由此可以定义泛化物品的和：h、l都是泛化物品，若泛化物品f满足f(v)=max{h(k)+l(v-k)|0&lt;=k&lt;=v}，则称f是h与l的和，即f=h+l。这个运算的时间复杂度取决于背包的容量，是O(V^2)。</p>
<p>泛化物品的定义表明：在一个背包问题中，若将两个泛化物品代以它们的和，不影响问题的答案。事实上，对于其中的物品都是泛化物品的背包问题，求它的答案的过程也就是求所有这些泛化物品之和的过程。设此和为s，则答案就是s[0..V]中的最大值。</p>
<h2 id="背包问题的泛化物品">背包问题的泛化物品</h2>
<p>一个背包问题中，可能会给出很多条件，包括每种物品的费用、价值等属性，物品之间的分组、依赖等关系等。但肯定能将问题对应于某个泛化物品。也就是说，给定了所有条件以后，就可以对每个非负整数v求得：若背包容量为v，将物品装入背包可得到的最大价值是多少，这可以认为是定义在非负整数集上的一件泛化物品。这个泛化物品——或者说问题所对应的一个定义域为非负整数的函数——包含了关于问题本身的高度浓缩的信息。一般而言，求得这个泛化物品的一个子域（例如0..V）的值之后，就可以根据这个函数的取值得到背包问题的最终答案。</p>
<p>综上所述，一般而言，求解背包问题，即求解这个问题所对应的一个函数，即该问题的泛化物品。而求解某个泛化物品的一种方法就是将它表示为若干泛化物品的和然后求之。</p>
<h2 id="小结-7">小结</h2>
<p>本讲可以说都是我自己的原创思想。具体来说，是我在学习函数式编程的 Scheme 语言时，用函数编程的眼光审视各类背包问题得出的理论。这一讲真的很抽象，也许在“模型的抽象程度”这一方面已经超出了NOIP的要求，所以暂且看不懂也没关系。相信随着你的OI之路逐渐延伸，有一天你会理解的。</p>
<p>我想说：“思考”是一个OIer最重要的品质。简单的问题，深入思考以后，也能发现更多。</p>
<h1 id="p09-背包问题问法的变化">P09: 背包问题问法的变化</h1>
<p>以上涉及的各种背包问题都是要求在背包容量（费用）的限制下求可以取到的最大价值，但背包问题还有很多种灵活的问法，在这里值得提一下。但是我认为，只要深入理解了求背包问题最大价值的方法，即使问法变化了，也是不难想出算法的。</p>
<p>例如，求解最多可以放多少件物品或者最多可以装满多少背包的空间。这都可以根据具体问题利用前面的方程求出所有状态的值（f数组）之后得到。</p>
<p>还有，如果要求的是“总价值最小”“总件数最小”，只需简单的将上面的状态转移方程中的max改成min即可。</p>
<p>下面说一些变化更大的问法。</p>
<h2 id="输出方案">输出方案</h2>
<p>一般而言，背包问题是要求一个最优值，如果要求输出这个最优值的方案，可以参照一般动态规划问题输出方案的方法：记录下每个状态的最优值是由状态转移方程的哪一项推出来的，换句话说，记录下它是由哪一个策略推出来的。便可根据这条策略找到上一个状态，从上一个状态接着向前推即可。</p>
<p>还是以01背包为例，方程为f[i][v]=max{f[i-1][v],f[i-1][v-c[i]]+w[i]}。再用一个数组g[i][v]，设g[i][v]=0表示推出f[i][v]的值时是采用了方程的前一项（也即f[i][v]=f[i-1][v]），g[i][v]表示采用了方程的后一项。注意这两项分别表示了两种策略：未选第i个物品及选了第i个物品。那么输出方案的伪代码可以这样写（设最终状态为f[N][V]）：</p>
<pre><code>i=N
v=V
while(i&gt;0)
    if(g[i][v]==0)
        print &quot;未选第i项物品&quot;
    else if(g[i][v]==1)
        print &quot;选了第i项物品&quot;
        v=v-c[i]
</code></pre>
<p>另外，采用方程的前一项或后一项也可以在输出方案的过程中根据f[i][v]的值实时地求出来，也即不须纪录g数组，将上述代码中的g[i][v]==0改成f[i][v]==f[i-1][v]，g[i][v]==1改成f[i][v]==f[i-1][v-c[i]]+w[i]也可。</p>
<h2 id="输出字典序最小的最优方案">输出字典序最小的最优方案</h2>
<p>这里“字典序最小”的意思是1..N号物品的选择方案排列出来以后字典序最小。以输出01背包最小字典序的方案为例。</p>
<p>一般而言，求一个字典序最小的最优方案，只需要在转移时注意策略。首先，子问题的定义要略改一些。我们注意到，如果存在一个选了物品1的最优方案，那么答案一定包含物品1，原问题转化为一个背包容量为v-c[1]，物品为2..N的子问题。反之，如果答案不包含物品1，则转化成背包容量仍为V，物品为2..N的子问题。不管答案怎样，子问题的物品都是以i..N而非前所述的1..i的形式来定义的，所以状态的定义和转移方程都需要改一下。但也许更简易的方法是先把物品逆序排列一下，以下按物品已被逆序排列来叙述。</p>
<p>在这种情况下，可以按照前面经典的状态转移方程来求值，只是输出方案的时候要注意：从N到1输入时，如果f[i][v]==f[i-v]及f[i][v]==f[i-1][f-c[i]]+w[i]同时成立，应该按照后者（即选择了物品i）来输出方案。</p>
<h2 id="求方案总数">求方案总数</h2>
<p>对于一个给定了背包容量、物品费用、物品间相互关系（分组、依赖等）的背包问题，除了再给定每个物品的价值后求可得到的最大价值外，还可以得到装满背包或将背包装至某一指定容量的方案总数。</p>
<p>对于这类改变问法的问题，一般只需将状态转移方程中的max改成sum即可。例如若每件物品均是完全背包中的物品，转移方程即为</p>
<pre><code>f[i][v]=sum{f[i-1][v],f[i][v-c[i]]}
</code></pre>
<p>初始条件f[0][0]=1。</p>
<p>事实上，这样做可行的原因在于状态转移方程已经考察了所有可能的背包组成方案。</p>
<h2 id="最优方案的总数">最优方案的总数</h2>
<p>这里的最优方案是指物品总价值最大的方案。以01背包为例。</p>
<p>结合求最大总价值和方案总数两个问题的思路，最优方案的总数可以这样求：f[i][v]意义同前述，g[i][v]表示这个子问题的最优方案的总数，则在求f[i][v]的同时求g[i][v]的伪代码如下：</p>
<pre><code>for i=1..N
   for v=0..V
        f[i][v]=max{f[i-1][v],f[i-1][v-c[i]]+w[i]}
        g[i][v]=0
        if(f[i][v]==f[i-1][v])
            inc(g[i][v],g[i-1][v])
        if(f[i][v]==f[i-1][v-c[i]]+w[i])
            inc(g[i][v],g[i-1][v-c[i]])
</code></pre>
<p>如果你是第一次看到这样的问题，请仔细体会上面的伪代码。</p>
<h2 id="求次优解-第k优解">求次优解、第K优解</h2>
<p>对于求次优解、第K优解类的问题，如果相应的最优解问题能写出状态转移方程、用动态规划解决，那么求次优解往往可以相同的复杂度解决，第K优解则比求最优解的复杂度上多一个系数K。</p>
<p>其基本思想是将每个状态都表示成有序队列，将状态转移方程中的max/min转化成有序队列的合并。这里仍然以01背包为例讲解一下。</p>
<p>首先看01背包求最优解的状态转移方程：f[i][v]=max{f[i-1][v],f[i-1][v-c[i]]+w[i]}。如果要求第K优解，那么状态f[i][v]就应该是一个大小为K的数组f[i][v][1..K]。其中f[i][v][k]表示前i个物品、背包大小为v时，第k优解的值。“f[i][v]是一个大小为K的数组”这一句，熟悉C语言的同学可能比较好理解，或者也可以简单地理解为在原来的方程中加了一维。显然f[i][v][1..K]这K个数是由大到小排列的，所以我们把它认为是一个有序队列。</p>
<p>然后原方程就可以解释为：f[i][v]这个有序队列是由f[i-1][v]和f[i-1][v-c[i]]+w[i]这两个有序队列合并得到的。有序队列f[i-1][v]即f[i-1][v][1..K]，f[i-1][v-c[i]]+w[i]则理解为在f[i-1][v-c[i]][1..K]的每个数上加上w[i]后得到的有序队列。合并这两个有序队列并将结果（的前K项）储存到f[i][v][1..K]中的复杂度是O(K)。最后的答案是f[N][V][K]。总的复杂度是O(NVK)。</p>
<p>为什么这个方法正确呢？实际上，一个正确的状态转移方程的求解过程遍历了所有可用的策略，也就覆盖了问题的所有方案。只不过由于是求最优解，所以其它在任何一个策略上达不到最优的方案都被忽略了。如果把每个状态表示成一个大小为K的数组，并在这个数组中有序的保存该状态可取到的前K个最优值。那么，对于任两个状态的max运算等价于两个由大到小的有序队列的合并。</p>
<p>另外还要注意题目对于“第K优解”的定义，将策略不同但权值相同的两个方案是看作同一个解还是不同的解。如果是前者，则维护有序队列时要保证队列里的数没有重复的。</p>
<h2 id="小结-8">小结</h2>
<p>显然，这里不可能穷尽背包类动态规划问题所有的问法。甚至还存在一类将背包类动态规划问题与其它领域（例如数论、图论）结合起来的问题，在这篇论背包问题的专文中也不会论及。但只要深刻领会前述所有类别的背包问题的思路和状态转移方程，遇到其它的变形问法，只要题目难度还属于NOIP，应该也不难想出算法。触类旁通、举一反三，应该也是一个OIer应有的品质吧。</p>
<h1 id="附usaco中的背包问题">附：USACO中的背包问题</h1>
<p>USACO是USA Computing Olympiad的简称，它组织了很多面向全球的计算机竞赛活动。</p>
<p>USACO Trainng是一个很适合初学者的题库，我认为它的特色是题目质量高，循序渐进，还配有不错的课文和题目分析。其中关于背包问题的那篇课文 (TEXT Knapsack Problems) 也值得一看。</p>
<p>另外，USACO Contest是USACO常年组织的面向全球的竞赛系列，在此也推荐NOIP选手参加。</p>
<p>我整理了USACO Training中涉及背包问题的题目，应该可以作为不错的习题。其中标加号的是我比较推荐的，标叹号的是我认为对NOIP选手比较有挑战性的。</p>
<h2 id="题目列表">题目列表</h2>
<p>· Inflate (+) （基本01背包）</p>
<p>· Stamps (+)(!) （对初学者有一定挑战性）</p>
<p>· Money</p>
<p>· Nuggets</p>
<p>· Subsets</p>
<p>· Rockers (+) （另一类有趣的“二维”背包问题）</p>
<p>· Milk4 (!) （很怪的背包问题问法，较难用纯DP求解）</p>
<h2 id="题目简解">题目简解</h2>
<p>以下文字来自我所撰的《USACO心得》一文，该文的完整版本，包括我的程序，可在DD的USACO征程中找到。</p>
<p>Inflate 是加权01 背包问题，也就是说：每种物品只有一件，只可以选择放或者不放；而且每种物品有对应的权值，目标是使总权值最大或最小。它最朴素的状态转移方程是：f[k][i] = max{f[k-1][i] , f[k-1][i-v[k]]+w[k]}。f[k][i]表示前k 件物品花费代价i 可以得到的最大权值。v[k]和w[k]分别是第k 件物品的花费和权值。可以看到， f[k]的求解过程就是使用第k 件物品对f[k-1]进行更新的过程。那么事实上就不用使用二维数组，只需要定义f[i]，然后对于每件物品k，顺序地检查f[i]与f[i-v[k]]+w[k]的大小，如果后者更大，就对前者进行更新。这是背包问题中典型的优化方法。</p>
<p>题目stamps 中，每种物品的使用量没有直接限制，但使用物品的总量有限制。求第一个不能用这有限个物品组成的背包的大小。（可以这样等价地认为）设f[k][i] 表示前k 件物品组成大小为i 的背包， 最少需要物品的数量。则f[k][i]= min{f[k-1][i],f[k-1][i-j*s[k]]+j}，其中j 是选择使用第k 件物品的数目，这个方程运用时可以用和上面一样的方法处理成一维的。求解时先设置一个粗糙的循环上限，即最大的物品乘最多物品数。</p>
<p>Money 是多重背包问题。也就是每个物品可以使用无限多次。要求解的是构成一种背包的不同方案总数。基本上就是把一般的多重背包的方程中的min 改成sum 就行了。</p>
<p>Nuggets 的模型也是多重背包。要求求解所给的物品不能恰好放入的背包大小的最大值（可能不存在）。只需要根据“若i、j 互质，则关于x、y 的不定方程i<em>x+y</em>j=n 必有正整数解，其中n&gt;i<em>j”这一定理得出一个循环的上限。 Subsets 子集和问题相当于物品大小是前N 个自然数时求大小为N</em>(N+1)/4 的 01 背包的方案数。</p>
<p>Rockers 可以利用求解背包问题的思想设计解法。我的状态转移方程如下： f[i][j][t]=max{f[i][j][t-1] , f[i-1][j][t] , f[i-1][j][t-time[i]]+1 , f[i-1][j-1][T]+(t&gt;=time[i])}。其中 f[i][j][t]表示前i 首歌用j 张完整的盘和一张录了t 分钟的盘可以放入的最多歌数，T 是一张光盘的最大容量，t&gt;=time[i]是一个bool 值转换成int 取值为0 或1。但我后来发现我当时设计的状态和方程效率有点低，如果换成这样：f[i][j]=(a,b)表示前i 首歌中选了j 首需要用到a 张完整的光盘以及一张录了b 分钟的光盘，会将时空复杂度都大大降低。这种将状态的值设为二维的方法值得注意。</p>
<p>Milk4 是这些类背包问题中难度最大的一道了。很多人无法做到将它用纯DP 方法求解，而是用迭代加深搜索枚举使用的桶，将其转换成多重背包问题再DP。由于 USACO 的数据弱，迭代加深的深度很小，这样也可以AC，但我们还是可以用纯DP 方法将它完美解决的。设f[k]为称量出k 单位牛奶需要的最少的桶数。那么可以用类似多重背包的方法对f 数组反复更新以求得最小值。然而困难在于如何输出字典序最小的方案。我们可以对每个i 记录pre_f[i]和pre_v[i]。表示得到i 单位牛奶的过程是用pre_f[i]单位牛奶加上若干个编号为pre_v[i]的桶的牛奶。这样就可以一步步求得得到i 单位牛奶的完整方案。为了使方案的字典序最小，我们在每次找到一个耗费桶数相同的方案时对已储存的方案和新方案进行比较再决定是否更新方案。为了使这种比较快捷，在使用各种大小的桶对f 数组进行更新时先大后小地进行。USACO 的官方题解正是这一思路。如果认为以上文字比较难理解可以阅读官方程序或我的程序。</p>
<h1 id="版权">版权</h1>
<p>Copyright (c) 2007 Tianyi Cui</p>
<p>Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.2 or any later version published by the Free Software Foundation.</p>
<p>整理 by stntwm</p>
<h1 id="完全背包问题优化分析">完全背包问题优化分析</h1>
<p>无限背包,最容易想到的自然是(所谓无限背包,意思是说,物品可以无限地选取,而不是只能选择一个)<br>
(1)定义F(i,j)为i时间前j个物品的最优解可知<br>
F(i,j)=max{ F(k,j-1)+(i -k ) div t[j]*w[j] } (0&lt;=k&lt;=i)<br>
此种算法复杂度接近O(n^3),很不理想,考虑到可以不枚举分配的时间而是枚举<br>
选择多少个j物品,可以得到一个较上式为优化的方程.<br>
F(i,j)=max{ F(i-t[j]<em>k,j-1)+k</em>w[j] } (0&lt;=k&lt;=i mod t[j] );<br>
这样得到进一步优化.但是这样依然要TLE第二个数据.</p>
<p>另外一个问题是直接开数据将要MLE.对于这类方程,我们用的最多的办法,最容易理解的办法就是滚动数据,滚动数组可以用mod来实现,也可以开两个一维数组变量之后交替复制,就是在每次递归之前多加一句g:=f;其中F是当前数组,G是上一数组.</p>
<p>但事实上,可以只用一个一维数组,关键在于递推的顺序性,一般是这样实现的.!!下面的代码没有经过debug或者make,而且仅仅是一般的背包问题的伪代码</p>
<pre><code>for(int j=1;j&lt;=n;j++)
    for(int i=m;i&gt;=0;i--)
        if ((t[j]&lt;=i)&amp;&amp;(f[i-t[j]]+w[j]&gt;f[i])) 
            f[i]=f[i-t[j]]+w[j];
</code></pre>
<h2 id="结论">结论</h2>
<p>在每进行一次第一行的循环节(就是2-4行)后,数组f中f就是前j个物品在i时间时的最优解.为什么?当代码尚未开始执行,f显然满足这样的性质,每次循环时我们用第j个物品尝试加入到原来i时间的方案中,如果发现当前解更优,就更新f中的值.要注意其中i的循还顺序,当解问题f(i,j)时,我们需要问题f(k,j-1)的解,其中k&lt;=i,换言之,在上述代码中,我们解决f这一子问题的时候需要保证f<a href="k%3C=i">k</a>的数据还是未更新过的数据.如果把i的循环顺序掉转,会得到怎么样的结果呢?下面有分析.<br>
(在这样的实现方案中,第二行的i可以简单地至t[j]停止循环)<br>
由以上的思路,对于这道题目,我们得到了这样的代码</p>
<pre><code>for j:=1 to n do
     for i:=m downto t[j] do
        tmp1:=i;
        tmp2:=0;
        for k:=1 to i div t[j] do
            dec(tmp1,t[j]);
            inc(tmp2,w[j]);
            tmp:=f[tmp1]+tmp2;
            if tmp&gt;f then f:=tmp;
</code></pre>
<p>但是即使是这样的代码,在第二个数据的面前还是要TLE.....<br>
最后我们发现,对于无限背包,每个物品可以取到无数次,换言之,我们只希望最后解最优,而不考虑是否解里面有多个相同的物品.也就是说,我们可以把第j个物品加到已经加过第J物品的解上.别的分析和一般的01背包是一致的,关键在于如何反复地检验能否加入第J个物品.<br>
回想一般的01背包的代码,我们在代码第2行让i从m循环到t[j],以此来保证第J个物品将会加到一个尚没有出现过该物品的方案中,那么,如果我们反过来循环呢?</p>
<pre><code>for j:=1 to n do
    for i:=t[j] to m do
        if (t[j]&lt;=i)and(f[i-t[j]]+w[j]&gt;f then
            f:=f[i-t[j]]+w[j];
</code></pre>
<p>此时,第J个物品便有可能加入到一个已经有该物品的最优解中,正好满足完全背包问题的要求.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[游记列表[TOP]]]></title>
        <id>https://qz-cqy.github.io/post/list</id>
        <link href="https://qz-cqy.github.io/post/list">
        </link>
        <updated>2020-01-07T08:15:25.000Z</updated>
        <content type="html"><![CDATA[<p><a href="/post/i-ak-csp2019-j">CSP2019入门级游记</a></p>
<p><a href="/post/i-ak-noip2018-pj">NOIp2018普及组游记</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[AC题目A+B的1000种方法[TOP]]]></title>
        <id>https://qz-cqy.github.io/post/how-to-ac-luogu-p1001</id>
        <link href="https://qz-cqy.github.io/post/how-to-ac-luogu-p1001">
        </link>
        <updated>2020-01-06T09:29:05.000Z</updated>
        <content type="html"><![CDATA[<h1 id="首先标准方法">首先，标准方法</h1>
<blockquote>
<p>C++</p>
</blockquote>
<pre><code class="language-cpp">#include &lt;iostream&gt;
using namespace std;
int main()
{
	int a, b;
	cin&gt;&gt;a&gt;&gt;b;
	cout&lt;&lt;a+b&lt;&lt;endl;
	return 0;
}
</code></pre>
<blockquote>
<p>C</p>
</blockquote>
<pre><code class="language-c">#include &lt;stdio.h&gt;
int main() {
    int a,b;
    scanf(&quot;%d%d&quot;,&amp;a,&amp;b);
    printf(&quot;%d&quot;, a+b);
    return 0;
}
</code></pre>
<blockquote>
<p>Pascal</p>
</blockquote>
<pre><code class="language-pascal">var a, b: longint;
begin
    readln(a,b);
    writeln(a+b);
end.
</code></pre>
<blockquote>
<p>Python2</p>
</blockquote>
<pre><code class="language-python">s = raw_input().split()
print int(s[0]) + int(s[1])
</code></pre>
<blockquote>
<p>Python3</p>
</blockquote>
<pre><code class="language-python">s = input().split()
print(int(s[0]) + int(s[1]))
</code></pre>
<blockquote>
<p>Java</p>
</blockquote>
<pre><code class="language-java">import java.io.*;
import java.util.*;
public class Main {
    public static void main(String args[]) throws Exception {
        Scanner cin=new Scanner(System.in);
        int a = cin.nextInt(), b = cin.nextInt();
        System.out.println(a+b);
    }
}
</code></pre>
<blockquote>
<p>JavaScript</p>
</blockquote>
<pre><code class="language-js">const fs = require('fs')
const data = fs.readFileSync('/dev/stdin')
const result = data.toString('ascii').trim().split(' ').map(x =&gt; parseInt(x)).reduce((a, b) =&gt; a + b, 0)
console.log(result)
process.exit()
</code></pre>
<blockquote>
<p>Ruby</p>
</blockquote>
<pre><code class="language-ruby">a, b = gets.split.map(&amp;:to_i)
print a+b
</code></pre>
<blockquote>
<p>PHP</p>
</blockquote>
<pre><code class="language-php">&lt;?php
$input = trim(file_get_contents(&quot;php://stdin&quot;));
list($a, $b) = explode(' ', $input);
echo $a + $b;
</code></pre>
<blockquote>
<p>Rust</p>
</blockquote>
<pre><code class="language-rust">use std::io;

fn main(){
    let mut input=String::new();
    io::stdin().read_line(&amp;mut input).unwrap();
    let mut s=input.trim().split(' ');

    let a:i32=s.next().unwrap()
               .parse().unwrap();
    let b:i32=s.next().unwrap()
               .parse().unwrap();
    println!(&quot;{}&quot;,a+b);
}
</code></pre>
<blockquote>
<p>Go</p>
</blockquote>
<pre><code class="language-go">package main

import &quot;fmt&quot;

func main() {
   var a, b int
   fmt.Scanf(&quot;%d%d&quot;, &amp;a, &amp;b)
   fmt.Println(a+b)
}
</code></pre>
<blockquote>
<p>C# Mono</p>
</blockquote>
<pre><code class="language-cpp">using System;

public class APlusB{
    private static void Main(){
        string[] input = Console.ReadLine().Split(' ');
        Console.WriteLine(int.Parse(input[0]) + int.Parse(input[1]));
    }
}
</code></pre>
<blockquote>
<p>VB Mono</p>
</blockquote>
<pre><code class="language-vb">Imports System

Module APlusB
   Sub Main()
       Dim ins As String() = Console.ReadLine().Split(New Char(){&quot; &quot;c})
       Console.WriteLine(Int(ins(0))+Int(ins(1)))
   End Sub
End Module
</code></pre>
<blockquote>
<p>Kotlin</p>
</blockquote>
<pre><code class="language-kotlin">fun main(args: Array&lt;String&gt;) {
    val (a, b) = readLine()!!.split(' ').map(String::toInt)
    println(a + b)
}
</code></pre>
<blockquote>
<p>Haskell</p>
</blockquote>
<pre><code>main = do
    [a, b] &lt;- (map read . words) `fmap` getLine
    print (a+b)
</code></pre>
<blockquote>
<p>Scala</p>
</blockquote>
<pre><code>object Main extends App {
  println(scala.io.StdIn.readLine().split(&quot; &quot;).map(_.toInt).sum)
}
</code></pre>
<blockquote>
<p>Perl</p>
</blockquote>
<pre><code class="language-perl">my $in = &lt;STDIN&gt;;
chomp $in;
$in = [split /[\s,]+/, $in];
my $c = $in-&gt;[0] + $in-&gt;[1];
print &quot;$c\n&quot;;
</code></pre>
<blockquote>
<p>文言</p>
</blockquote>
<pre><code>施「require('fs').readFileSync」於「「/dev/stdin」」。名之曰「數據」。
施「(buf =&gt; buf.toString().trim())」於「數據」。昔之「數據」者。今其是矣。
施「(s =&gt; s.split(' '))」於「數據」。昔之「數據」者。今其是矣。
注曰。「「文言尚菜，無對象之操作，故需 JavaScript 之语法」」。

夫「數據」之一。取一以施「parseInt」。名之曰「甲」。
夫「數據」之二。取一以施「parseInt」。名之曰「乙」。

加「甲」以「乙」。書之。
</code></pre>
<p>以上内容来自<a href="https://www.luogu.com.cn/problem/P1001">这里</a></p>
<h1 id="二分答案">二分答案</h1>
<pre><code class="language-cpp">#include &lt;iostream&gt;
using namespace std;

int a, b;

int BinarySearch(int left, int right);

int main()
{
    cin&gt;&gt;a&gt;&gt;b;
    cout&lt;&lt;BinarySearch(-2147483648, 2147483647)&lt;&lt;endl;
    return 0;
}

int BinarySearch(int left, int right)
{
    int mid = (left + right) / 2;
    if(mid == a + b) return mid;
    else if(mid &lt; a + b) return BinarySearch(mid+1, right);
    else return BinarySearch(left, mid-1); 
}
</code></pre>
<blockquote>
<p>升级版：namespace</p>
</blockquote>
<pre><code class="language-cpp">#include &lt;iostream&gt;

namespace add
{
    inline int BinarySearch(int l, int r, int a, int b)
    {
    	int m = (l + r) / 2;
        if(m == a + b) return m;
    	else if(m &lt; a + b) return add::BinarySearch(m+1, r, a, b);
        else return add::BinarySearch(l, m-1, a, b); 
    }
}

int main()
{
    int a, b;
    std::cin&gt;&gt;a&gt;&gt;b;
    std::cout&lt;&lt;add::BinarySearch(-2147483648, 2147483647, a, b)&lt;&lt;std::endl;
    return 0;
}
</code></pre>
<h1 id="lctlink-cut-tree">LCT(Link-Cut Tree)</h1>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
using namespace std;
struct node 
{
    int data,rev,sum;
    node *son[2],*pre;
    bool judge();
    bool isroot();
    void pushdown();
    void update();
    void setson(node *child,int lr);
}lct[233];
int top,a,b;
node *getnew(int x)
{
    node *now=lct+ ++top;
    now-&gt;data=x;
    now-&gt;pre=now-&gt;son[1]=now-&gt;son[0]=lct;
    now-&gt;sum=0;
    now-&gt;rev=0;
    return now;
}
bool node::judge(){return pre-&gt;son[1]==this;}
bool node::isroot()
{
    if(pre==lct)return true;
    return !(pre-&gt;son[1]==this||pre-&gt;son[0]==this);
}
void node::pushdown()
{
    if(this==lct||!rev)return;
    swap(son[0],son[1]);
    son[0]-&gt;rev^=1;
    son[1]-&gt;rev^=1;
    rev=0;
}
void node::update(){sum=son[1]-&gt;sum+son[0]-&gt;sum+data;}
void node::setson(node *child,int lr)
{
    this-&gt;pushdown();
    child-&gt;pre=this;
    son[lr]=child;
    this-&gt;update();
}
void rotate(node *now)
{
    node *father=now-&gt;pre,*grandfa=father-&gt;pre;
    if(!father-&gt;isroot()) grandfa-&gt;pushdown();
    father-&gt;pushdown();now-&gt;pushdown();
    int lr=now-&gt;judge();
    father-&gt;setson(now-&gt;son[lr^1],lr);
    if(father-&gt;isroot()) now-&gt;pre=grandfa;
    else grandfa-&gt;setson(now,father-&gt;judge());
    now-&gt;setson(father,lr^1);
    father-&gt;update();now-&gt;update();
    if(grandfa!=lct) grandfa-&gt;update();
}
void splay(node *now)
{
    if(now-&gt;isroot())return;
    for(;!now-&gt;isroot();rotate(now))
    if(!now-&gt;pre-&gt;isroot())
    now-&gt;judge()==now-&gt;pre-&gt;judge()?rotate(now-&gt;pre):rotate(now);
}
node *access(node *now)
{
    node *last=lct;
    for(;now!=lct;last=now,now=now-&gt;pre)
    {
        splay(now);
        now-&gt;setson(last,1);
    }
    return last;
}
void changeroot(node *now)
{
    access(now)-&gt;rev^=1;
    splay(now);
}
void connect(node *x,node *y)
{
    changeroot(x);
    x-&gt;pre=y;
    access(x);
}
void cut(node *x,node *y)
{
    changeroot(x);
    access(y);
    splay(x);
    x-&gt;pushdown();
    x-&gt;son[1]=y-&gt;pre=lct;
    x-&gt;update();
}
int query(node *x,node *y)
{
    changeroot(x);
    node *now=access(y);
    return now-&gt;sum;
}
int main()
{
    scanf(&quot;%d%d&quot;,&amp;a,&amp;b);
    node *A=getnew(a);
    node *B=getnew(b);
    //连边 Link
        connect(A,B);
    //断边 Cut
        cut(A,B);
    //再连边orz Link again
        connect(A,B);
    printf(&quot;%d\n&quot;,query(A,B)); 
    return 0;
}
</code></pre>
<p>@Treeloveswater</p>
<h1 id="树状数组">树状数组</h1>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstring&gt;
using namespace std;
int lowbit(int a)
{
    return a&amp;(-a);
}
int main()
{
    int n=2,m=1;
    int ans[m+1];
    int a[n+1],c[n+1],s[n+1];
    int o=0;
    memset(c,0,sizeof(c));
    s[0]=0;
    for(int i=1;i&lt;=n;i++)
    {
        cin&gt;&gt;a[i];
        s[i]=s[i-1]+a[i];
        c[i]=s[i]-s[i-lowbit(i)];//树状数组创建前缀和优化
    }
    for(int i=1;i&lt;=m;i++)
    {
        int q=2;
        //if(q==1)
        //{（没有更改操作）
        //    int x,y;
        //    cin&gt;&gt;x&gt;&gt;y;
        //    int j=x;
        //    while(j&lt;=n)
        //    {
        //        c[j]+=y;
        //        j+=lowbit(j);
        //    }
        //}
        //else
        {
            int x=1,y=2;//求a[1]+a[2]的和
            int s1=0,s2=0,p=x-1;
            while(p&gt;0)
            {
                s1+=c[p];
                p-=lowbit(p);//树状数组求和操作，用两个前缀和相减得到区间和
            }
            p=y;
            while(p&gt;0)
            {
                s2+=c[p];
                p-=lowbit(p);
            }    
            o++;
            ans[o]=s2-s1;//存储答案
        }
    }
    for(int i=1;i&lt;=o;i++)
        cout&lt;&lt;ans[i]&lt;&lt;endl;//输出
    return 0;
}
</code></pre>
<p>@Lolierl</p>
<h1 id="宏定义">宏定义</h1>
<pre><code class="language-cpp">#include &lt;cstdio&gt; 
#include &lt;iostream&gt;
#define lol long long int 
#define A using
#define Long namespace
#define time std
#define ago ;
#define Here int
#define was main
#define a ()
#define monkey {  
#define called lol x,y;
#define Jack cin&gt;&gt;x&gt;&gt;y;
#define ak cout&lt;&lt;x+y;
#define ioi return 0;
#define Orz }
A Long time ago Here was a monkey called Jack ak ioi Orz
</code></pre>
<p>@我叫榨菜</p>
<h1 id="splay">Splay</h1>
<pre><code class="language-cpp">//一颗资瓷区间加、区间翻转、区间求和的Splay
#include &lt;bits/stdc++.h&gt;
#define ll long long
#define N 100000
using namespace std;
int sz[N], rev[N], tag[N], sum[N], ch[N][2], fa[N], val[N];
int n, m, rt, x;
void push_up(int x){
    sz[x] = sz[ch[x][0]] + sz[ch[x][1]] + 1;
    sum[x] = sum[ch[x][1]] + sum[ch[x][0]] + val[x];
}
void push_down(int x){
    if(rev[x]){
        swap(ch[x][0], ch[x][1]);
        if(ch[x][1]) rev[ch[x][1]] ^= 1;
        if(ch[x][0]) rev[ch[x][0]] ^= 1;
        rev[x] = 0;
    }
    if(tag[x]){
        if(ch[x][1]) tag[ch[x][1]] += tag[x], sum[ch[x][1]] += tag[x];
        if(ch[x][0]) tag[ch[x][0]] += tag[x], sum[ch[x][0]] += tag[x];
        tag[x] = 0;
    }
}
void rotate(int x, int &amp;k){
    int y = fa[x], z = fa[fa[x]];
    int kind = ch[y][1] == x;
    if(y == k) k = x;
    else ch[z][ch[z][1]==y] = x;
    fa[x] = z; fa[y] = x; fa[ch[x][!kind]] = y;
    ch[y][kind] = ch[x][!kind]; ch[x][!kind] = y;
    push_up(y); push_up(x);
}
void splay(int x, int &amp;k){
    while(x != k){
        int y = fa[x], z = fa[fa[x]];
        if(y != k) if(ch[y][1] == x ^ ch[z][1] == y) rotate(x, k);
        else rotate(y, k);
        rotate(x, k);
    }
}
int kth(int x, int k){
    push_down(x);
    int r = sz[ch[x][0]]+1;
    if(k == r) return x;
    if(k &lt; r) return kth(ch[x][0], k);
    else return kth(ch[x][1], k-r);
}
void split(int l, int r){
    int x = kth(rt, l), y = kth(rt, r+2);
    splay(x, rt); splay(y, ch[rt][1]);
}
void rever(int l, int r){
    split(l, r);
    rev[ch[ch[rt][1]][0]] ^= 1;
}
void add(int l, int r, int v){
    split(l, r);
    tag[ch[ch[rt][1]][0]] += v;
    val[ch[ch[rt][1]][0]] += v;
    push_up(ch[ch[rt][1]][0]);
}
int build(int l, int r, int f){
    if(l &gt; r) return 0;
    if(l == r){
        fa[l] = f;
        sz[l] = 1;
        return l;
    }
    int mid = l + r &gt;&gt; 1;
    ch[mid][0] = build(l, mid-1, mid);
    ch[mid][1] = build(mid+1, r, mid);
    fa[mid] = f;
    push_up(mid);
    return mid;
}
int asksum(int l, int r){
    split(l, r);
    return sum[ch[ch[rt][1]][0]];
}
int main(){
    //总共两个数
    n = 2;
    rt = build(1, n+2, 0);//建树
    for(int i = 1; i &lt;= n; i++){
        scanf(&quot;%d&quot;, &amp;x);
        add(i, i, x);//区间加
    }
    rever(1, n);//区间翻转
    printf(&quot;%d\n&quot;, asksum(1, n));//区间求和
    return 0;
}
</code></pre>
<p>@SW_Wind</p>
<h1 id="spfa">SPFA</h1>
<pre><code class="language-cpp">#include&lt;cstdio&gt;
using namespace std;
int n,m,a,b,op,head[200009],next[200009],dis[200009],len[200009],v[200009],l,r,team[200009],pd[100009],u,v1,e;
int lt(int x,int y,int z)
{
    op++,v[op]=y;
    next[op]=head[x],head[x]=op,len[op]=z;
}
int SPFA(int s,int f)//SPFA……
{
    for(int i=1;i&lt;=200009;i++){dis[i]=999999999;}
    l=0,r=1,team[1]=s,pd[s]=1,dis[s]=0;
    while(l!=r)
    {
        l=(l+1)%90000,u=team[l],pd[u]=0,e=head[u];
        while(e!=0)
        {
            v1=v[e];
            if(dis[v1]&gt;dis[u]+len[e])
            {
                dis[v1]=dis[u]+len[e];
                if(!pd[v1])
                {
                    r=(r+1)%90000,
                    team[r]=v1,
                    pd[v1]=1;
                }
            }
            e=next[e];
        } 
    }
    return dis[f];
}
int main()
{
    scanf(&quot;%d%d&quot;,&amp;a,&amp;b);
    lt(1,2,a);lt(2,3,b);//1到2为a，2到3为b，1到3即为a+b……
    printf(&quot;%d&quot;,SPFA(1,3));
    return 0;
}
</code></pre>
<p>@doby</p>
<h1 id="floyd">Floyd</h1>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstring&gt;
using namespace std;
long long n=3,a,b,dis[4][4];
int main()
{
    cin&gt;&gt;a&gt;&gt;b;
    for(int i=1;i&lt;=n;i++)
    {
        for(int j=1;j&lt;=n;j++)
        {
            dis[i][j]=2147483647;
        }
    }
    dis[1][2]=a,dis[2][3]=b;
    for(int k=1;k&lt;=n;k++)
    {
        for(int i=1;i&lt;=n;i++)
        {
            for(int j=1;j&lt;=n;j++)
            {
                dis[i][j]=min(dis[i][j],dis[i][k]+dis[k][j]);//Floyd……
            }
        }
    }
    cout&lt;&lt;dis[1][3];
}
</code></pre>
<p>@doby</p>
<h1 id="递归">递归</h1>
<pre><code class="language-cpp">#include&lt;iostream&gt;
using namespace std;
long long a,b,c;
long long dg(long long a)
{
    if(a&lt;=5){return a;}//防超时……
    return (dg(a/2)+dg(a-a/2));
}
int main()
{
    cin&gt;&gt;a&gt;&gt;b;
    c=dg(a)+dg(b);
    cout&lt;&lt;c;
}
</code></pre>
<p>@doby</p>
<h1 id="高精">高精</h1>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstring&gt;
using namespace std;
int main()
{
    char a1[1000],b1[1000];
      int a[1000]={0},b[1000]={0},c[1000]={0},la,lb,lc,i,x;
      cin&gt;&gt;a1&gt;&gt;b1;
      la=strlen(a1);
      lb=strlen(b1);
      for(i=0;i&lt;=la-1;i++){a[la-i]=a1[i]-48;}
    for(i=0;i&lt;=lb-1;i++){b[lb-i]=b1[i]-48;}
      lc=1,x=0;
    while(lc&lt;=la||lc&lt;=lb){c[lc]=a[lc]+b[lc]+x,x=c[lc]/10,c[lc]%=10,lc++;}
    c[lc]=x;
    if(c[lc]==0){lc--;}
    for(i=lc;i&gt;=1;i--){cout&lt;&lt;c[i];}
    cout&lt;&lt;endl;
    return 0;
}
</code></pre>
<p>@doby</p>
<h1 id="dijkstrastl的优先队列优化">Dijkstra+STL的优先队列优化</h1>
<pre><code class="language-cpp">#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;cstdlib&gt;
#include &lt;cmath&gt;
#include &lt;cctype&gt;
#include &lt;climits&gt;
#include &lt;algorithm&gt;
#include &lt;map&gt;
#include &lt;queue&gt;
#include &lt;vector&gt;
#include &lt;ctime&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
using namespace std;
const int N=405;
struct Edge {
    int v,w;
};
vector&lt;Edge&gt; edge[N*N];
int n;
int dis[N*N];
bool vis[N*N];
struct cmp {
    bool operator()(int a,int b) {
        return dis[a]&gt;dis[b];
    }
};
int Dijkstra(int start,int end)
{
    priority_queue&lt;int,vector&lt;int&gt;,cmp&gt; dijQue;
    memset(dis,-1,sizeof(dis));
    memset(vis,0,sizeof(vis));
    dijQue.push(start);
    dis[start]=0;
    while(!dijQue.empty()) {
        int u=dijQue.top();
        dijQue.pop();
        vis[u]=0;
        if(u==end)
            break;
        for(int i=0; i&lt;edge[u].size(); i++) {
            int v=edge[u][i].v;
            if(dis[v]==-1 || dis[v]&gt;dis[u]+edge[u][i].w) {
                dis[v]=dis[u]+edge[u][i].w;
                if(!vis[v]) {
                    vis[v]=true;
                    dijQue.push(v);
                }
            }
        }
    }
    return dis[end];
}
int main()
{
    int a,b;
    scanf(&quot;%d%d&quot;,&amp;a,&amp;b);
    Edge Qpush;

    Qpush.v=1;
    Qpush.w=a;
    edge[0].push_back(Qpush);

    Qpush.v=2;
    Qpush.w=b;
    edge[1].push_back(Qpush);

    printf(&quot;%d&quot;,Dijkstra(0,2));
    return 0;
}
</code></pre>
<p>@yyy2015c01</p>
<h1 id="trie字典树">Trie字典树</h1>
<pre><code class="language-cpp">#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;cstdlib&gt;
#include&lt;algorithm&gt;
using namespace std;
struct node{
    int str[26];
    int sum;
}s[1000];
char str1[100];
int t=0,tot=0,ss=0;
bool f1;
void built()
{
    t=0;
    for(int i=0;i&lt;strlen(str1);i++)
    {
         if(str1[i]=='-'){
             f1=true;continue;
         }
         if(!s[t].str[str1[i]-'0'])
         s[t].str[str1[i]-'0']=++tot;
         t=s[t].str[str1[i]-'0'];
         s[t].sum=str1[i]-'0';
    }
}
int query()
{
   int t=0;int s1=0;
   for(int i=0;i&lt;strlen(str1);i++)
   {
           if(str1[i]=='-') continue;
           if(!s[t].str[str1[i]-'0']) return s1;
           t=s[t].str[str1[i]-'0'];
           s1=s1*10+s[t].sum;
   }
   return s1;
}
int main()
{    
  for(int i=1;i&lt;=2;i++)
  {
      f1=false;
      scanf(&quot;%s&quot;,str1);
    built();
    if(f1)
      ss-=query();
      else ss+=query();
  }
  printf(&quot;%d&quot;,ss);
  return 0;    
}
</code></pre>
<p>@Linbom</p>
<p>还有很多<s>毒瘤</s>搞笑解法，以后将不定期更新</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 P5834@洛谷 【[USACO19DEC]MooBuzz】]]></title>
        <id>https://qz-cqy.github.io/post/solution-luogu-p5834</id>
        <link href="https://qz-cqy.github.io/post/solution-luogu-p5834">
        </link>
        <updated>2019-12-19T13:48:40.000Z</updated>
        <content type="html"><![CDATA[<p><strong>题目大意：求从一开始第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>个既不是三的倍数又不是五的倍数的数</strong></p>
<p>没有思路。列几个数看看：</p>
<p>1, 2, 4, 7, 8, 11, 13, 14, 16, 17, 19, 22, 23, 26, 28, 29, ……</p>
<p>因为三乘五等于十五，所以猜测模15的余数可能有规律。列一下：</p>
<p>1, 2, 4, 7, 8, 11, 13, 14, 1, 2, 4, 7, 8, 11, 13, 14, ……</p>
<p>于是很明显地发现存在8位的循环节。根据数学推导可得（以下所有公式中的除号“/”均表示整除，即向下取整）：</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>n</mi><mi>s</mi><mo>=</mo><mo>(</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>8</mn><mo>)</mo><mo>∗</mo><mn>15</mn><mo>+</mo><mi>a</mi><mo>[</mo><mi>n</mi><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mn>8</mn><mo>]</mo></mrow><annotation encoding="application/x-tex">ans=(n/8)*15+a[n\mod8]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">8</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">8</span><span class="mclose">]</span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>[</mo><mn>1...</mn><mi>n</mi><mo>]</mo><mo>=</mo><mo>{</mo><mn>14</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>4</mn><mo separator="true">,</mo><mn>7</mn><mo separator="true">,</mo><mn>8</mn><mo separator="true">,</mo><mn>11</mn><mo separator="true">,</mo><mn>13</mn><mo>}</mo></mrow><annotation encoding="application/x-tex">a[1...n]=\{14, 1, 2, 4, 7, 8, 11, 13\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">1</span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">8</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">3</span><span class="mclose">}</span></span></span></span>，就是上面推导的余数。</p>
<p>但是当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mn>8</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">n\mod8=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">8</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>时发现有问题，此时<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>n</mi><mi>s</mi><mo>=</mo><mo>(</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>8</mn><mo>)</mo><mo>∗</mo><mn>15</mn><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">ans=(n/8)*15-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">8</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，特判一下就好。</p>
<p>AC代码：</p>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;

int a[8] = {14, 1, 2, 4, 7, 8, 11, 13};

int main()
{
	int n;
    cin&gt;&gt;n;
    int d = n / 8;
    int ans = d * 15;
    if(n % 8 != 0) ans += a[n%8];
    else --ans;
    cout&lt;&lt;ans&lt;&lt;endl;
    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 P4057@洛谷 【[Code+#1]晨跑】]]></title>
        <id>https://qz-cqy.github.io/post/solution-luogu-p4057</id>
        <link href="https://qz-cqy.github.io/post/solution-luogu-p4057">
        </link>
        <updated>2019-12-06T12:55:57.000Z</updated>
        <content type="html"><![CDATA[<h1 id="十年oi一场空不开long-long">十年OI一场空，不开long long……</h1>
<p>一开始没开ll被卡了好久，直到今天我看向了数据范围……</p>
<p>欧式gcd：</p>
<pre><code class="language-cpp">ll gcd(ll a, ll b)
{
  return b==0?a:gcd(b,a%b);
}
</code></pre>
<p>lcm：</p>
<pre><code class="language-cpp">ll lcm(ll a, ll b)
{
  return a/gcd(a,b)*b;
}
</code></pre>
<p>三个数的lcm就先求两个的lcm，再求下一个，即：</p>
<pre><code class="language-cpp">lcm(lcm(a,b),c);
</code></pre>
<p>完整代码：</p>
<pre><code class="language-cpp">#include &lt;iostream&gt;
using namespace std;
#define ll long long

ll gcd(ll a, ll b)
{
    return b==0?a:gcd(b,a%b);
}

ll lcm(ll a, ll b)
{
    return a/gcd(a,b)*b;
}

int main()
{
    ll a, b, c;
    cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;
    cout&lt;&lt;lcm(lcm(a,b),c)&lt;&lt;endl;
	return 0;
}
</code></pre>
]]></content>
    </entry>
</feed>